openapi: 3.0.0
info:
  title: 'TaxTank API'
  contact:
    name: 'Nicole Kelly'
    url: taxtank.com.au
    email: nicole@taxtank.com.au
  license:
    name: 'TaxTank API 1.0'
    url: taxtank.com.au
  version: '1.0'
servers:
  -
    url: 'https://api.taxtank.com.au'
    description: 'TaxTank Accounting System'
  -
    url: 'https://api.uat.taxtank.com.au'
    description: 'TaxTank Accounting System. For UAT testing only'
  -
    url: 'https://api.test.taxtank.com.au'
    description: 'TaxTank Accounting System. For testing only'
  -
    url: 'http://ttservice'
    description: 'TaxTank Accounting System. Local development testing only'
  -
    url: 'http://api.taxtank.local'
    description: 'TaxTank Accounting System. Local development testing only with custom local TLD'
  -
    url: 'http://taxtank.lndo.site'
    description: 'TaxTank Accounting System. Local development with Lando testing only'
paths:
  /1.0/adminapi/login:
    post:
      summary: 'Admin & SubAdmin Login'
      operationId: 'App\Action\AdminUserAction::adminLoginAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/adminapi/removejwttoken:
    post:
      operationId: 'App\Action\AdminUserAction::removeJwtTokenAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/adminapi/jwtrefreshtoken:
    post:
      operationId: 'App\Action\AdminUserAction::removeRefreshTokenAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/admin/users:
    post:
      operationId: 'App\Action\AdminUserAction::adminFetchAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/admin/users/add:
    post:
      operationId: 'App\Action\AdminUserAction::addAdminUserAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/admin/users/delete:
    post:
      operationId: 'App\Action\AdminUserAction::deleteAdminUserAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/admin/users/status:
    post:
      operationId: 'App\Action\AdminUserAction::adminUpdateStatusAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  '/1.0/admin/users/{id}':
    post:
      operationId: 'App\Action\AdminUserAction::adminFetchUserAction'
      parameters:
        -
          name: id
          in: path
          description: 'user id'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/admin/customers:
    post:
      operationId: 'App\Action\AdminUserAction::listOfCustomerAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/bearerToken:
    get:
      operationId: 'App\Action\AppAction::getBearerTokenAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/api_documentation:
    post:
      summary: 'Return the API documentation in json or by default yaml format'
      operationId: 'App\Action\AppAction::getAPIDocsInFormattedAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/bankaccount/add/closingBalance:
    post:
      operationId: 'App\Action\BankFeedAction::addClosingBalanceAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/bankaccount/listForecasting:
    post:
      operationId: 'App\Action\BankFeedAction::listForecastingAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/bankaccount/deleteForecasting:
    post:
      operationId: 'App\Action\BankFeedAction::deleteForecastingAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/bankaccount/addProperty:
    post:
      operationId: 'App\Action\BankFeedAction::addBankfeedPropertyAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/bankaccount/listProperty:
    post:
      operationId: 'App\Action\BankFeedAction::listPropertyAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/bankfeed/assign:
    post:
      operationId: 'App\Action\BankFeedAction::assignTransactionAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/bankfeed/:
    get:
      operationId: 'App\Action\BankFeedAction::bankFeedCronAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/bankfeeds_register:
    post:
      operationId: 'App\Action\BankFeedAction::bankfeedRegisterAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/getaccounts:
    post:
      operationId: 'App\Action\BankFeedAction::getAccountsAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/getaccountslist:
    post:
      operationId: 'App\Action\BankFeedAction::getAccountsListAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/previoustransaction:
    post:
      operationId: 'App\Action\BankFeedAction::userPreviousTransactionAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/bankfeedsoftdelete:
    post:
      operationId: 'App\Action\BankFeedAction::bankFeedSoftdeleteAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/undoPrivateTransaction:
    post:
      operationId: 'App\Action\BankFeedAction::undoBankFeedSoftDeleteAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/undoBankFeedAllocate:
    post:
      operationId: 'App\Action\BankFeedAction::undoBankFeedAllocateAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/bankaccountheaderinfo:
    post:
      operationId: 'App\Action\BankFeedAction::bankAccountHeaderInfoAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/bankfeedSoftDeleteAndTransferList:
    post:
      operationId: 'App\Action\BankFeedAction::bankfeedSoftDeleteAndTransferListAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/bankfeed/2.0/ydl/1.1/transactions:
    get:
      description: "\n     * Bankfeeds (Third party) APi call reference: get /transactions Get Transaction.\n     *\n     * Implementation Notes\n     *\n     * The Transaction service is used to get a list of transactions for a user.\n     * By default, this service returns the last 30 days of transactions from today's date.\n     * The keyword parameter performs a contains search on the original, consumer, and simple description\n     * attributes, replace the special characters #, &, and + with percent-encoding values %23, %26, and %2B respectively.\n     * Eg: for -Debit# , pass the input as -Debit%23.\n     * Values for categoryId parameter can be fetched from get transaction category list service.\n     * The categoryId is used to filter transactions based on system-defined category as well as user-defined category.\n     * User-defined categoryIds should be provided in the filter with the prefix 'U'. E.g. U10002\n     * The skip and top parameters are used for pagination. In the skip and top parameters pass the number of records to be skipped and retrieved, respectively. The response header provides the links to retrieve the next and previous set of transactions.\n     * Double quotes in the merchant name will be prefixed by backslashes (\\) in the response,\n     * e.g. Toys \\'R\\' Us.\n     * Note\n     * TDE is made available for bank and card accounts and for the US market only.The address field in the response is available only when the TDE key is turned on.\n     * accountReconType input parameter is relevant for investment accounts, provided the reconciliation feature is turned on.\n     * accountReconType input parameter will be ignored when container value passed is other than 'INVESTMENT'.\n     * accountReconType input parameter will be ignored when accountId(s) are passed.\n     * The pagination feature is available by default. If no values are passed in the skip and top parameters, the API will only return the first 500 transactions.\n     *     "
      operationId: 'App\Action\BankFeedAction::manualRefreshTransactionAction'
      parameters:
        -
          name: user_id
          in: query
          description: 'Local user id'
          required: true
          schema:
            type: integer
        -
          name: container
          in: query
          description: bank/creditCard/investment/insurance/loan/reward/bill/realEstate/otherAssets/otherLiabilities.
          required: true
          schema:
            type: string
        -
          name: providerAccountId
          in: query
          description: 'The provider account identification number aka providerAccountId'
          schema:
            type: integer
        -
          name: accountId
          in: query
          description: 'CSV accountIds'
          schema:
            type: string
        -
          name: accountReconType
          in: query
          description: 'UNRECONCILED (Default value), RECONCILED'
          schema:
            type: string
        -
          name: include
          in: query
          description: 'profile, holder, fullAccountNumber'
          schema:
            type: string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/previoustransactionhistory:
    post:
      operationId: 'App\Action\BankFeedAction::userPreviousTransactionHistoryAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/bankfeeds_login:
    post:
      operationId: 'App\Action\BankFeedAction::bankfeedLoginAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/assignpropertyaccounts:
    post:
      operationId: 'App\Action\BankFeedAction::assignPropertyAccountsAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/bankfeedDelete:
    post:
      operationId: 'App\Action\BankFeedAction::bankfeedDeleteAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/getBankFeedImport:
    post:
      operationId: 'App\Action\BankFeedAction::getBankFeedImportAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/bankFeedCSVImport:
    post:
      operationId: 'App\Action\BankFeedAction::bankFeedCSVImportAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/bankFeedImportDelete:
    post:
      operationId: 'App\Action\BankFeedAction::bankFeedImportDeleteAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/bankaccount/addPropertyIdLoan:
    post:
      operationId: 'App\Action\BankFeedAction::addPropertyIdLoanAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/bankaccount/assignLoanTransaction:
    post:
      operationId: 'App\Action\BankFeedAction::assignLoanTransactionAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/bankaccount/add:
    post:
      summary: 'This method is used by three different routes that include /1.0/user/bankaccount/add and /1.0/user/bankaccount/update/status as well as /1.0/user/bankaccount/update/nickname'
      description: 'This method is used by three different routes that include /1.0/user/bankaccount/add and /1.0/user/bankaccount/update/status as well as /1.0/user/bankaccount/update/nickname'
      operationId: 'App\Action\BankFeedAction::addBankAccountsAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/getbankaccountslist:
    post:
      operationId: 'App\Action\BankFeedAction::getBankAccountsListAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/dropdown/getUserBankAccount:
    post:
      operationId: 'App\Action\BankFeedAction::getBankAccountsAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/bankfeed/getSameAccountTransfer:
    post:
      operationId: 'App\Action\BankFeedAction::getSameAccountTransferAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/bankfeed/updateSameAccountTransfer:
    post:
      operationId: 'App\Action\BankFeedAction::updateSameAccountTransferAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/bankfeed/downloadSampleCSV:
    get:
      operationId: 'App\Action\BankFeedAction::downloadSampleCSVAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/cron/transfer/reconcile:
    get:
      operationId: 'App\Action\BankFeedAction::cronTransferReconcileAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/bankfeed/2.0/ydl/1.1/providers:
    get:
      description: "\n     * Implementation Notes\n     *\n     * The get provider service is used to retrieve all the providers that are enabled for the customer, search a provider service by its name or routing number, and retrieve popular sites of a region.\n     * Searching for a provider using a routing number is applicable only to the USA and Canada regions.\n     * The valid values for priority are:\n     * 1. cobrand: Returns providers that are enabled for the cobrand or customer (default value for priority)\n     * 2. popular: Returns providers that are popular among users of the customer\n     *\n     * Only the datasets, attributes, and containers that are enabled for the customer will be returned in the response.\n     * Input for the dataset$filter should adhere to the following expression:\n     * <dataset.name>[<attribute.name>.container[<container> OR <container>] OR <attribute.name>.container[<container>]]\n     * OR <dataset.name>[<attribute.name> OR <attribute.name>]\n     * dataset$filter value examples:\n     * ACCT_PROFILE[FULL_ACCT_NUMBER.container[bank OR investment OR creditCard]]\n     * ACCT_PROFILE[FULL_ACCT_NUMBER.container[bank]]\n     * BASIC_AGG_DATA[ACCOUNT_DETAILS.container[bank OR investment] OR HOLDINGS.container[bank]] OR ACCT_PROFILE[FULL_ACCT_NUMBER.container[bank]]\n     * BASIC_AGG_DATA\n     * BASIC_AGG_DATA OR ACCT_PROFILE\n     * BASIC_AGG_DATA [ ACCOUNT_DETAILS OR HOLDINGS ]\n     * BASIC_AGG_DATA [ ACCOUNT_DETAILS] OR DOCUMENT\n     * BASIC_AGG_DATA [ BASIC_ACCOUNT_INFO OR ACCOUNT_DETAILS ]\n     *\n     * The skip and top parameters are used for pagination. In the skip and top parameters, pass the number of records to be skipped and retrieved, respectively.\n     * The response header provides the links to retrieve the next and previous set of transactions.\n     *\n     * Note:\n     * 1. In a product flow involving user interaction, Yodlee recommends invoking this service with filters.\n     * 2. Without filters, the service may perform slowly as it takes a few minutes to return data in the response.\n     * 3. The AuthParameter appears in the response only in case of token-based aggregation sites.\n     * 4. The pagination feature only applies when the priority parameter is set as cobrand. If no values are provided in the skip and top parameters, the API will only return the first 500 records.\n     *\n     * Possible Yodlee responses:\n     * • 400    Y800 : Invalid value for priority\n     * • 400    Y800 : Invalid value for providerName\n     * • 400    Y801 : Invalid length for a site search. The search string must have atleast 1 character\n     * • 400    Y800 : Invalid value for skip\n     * • 400    Y804 : Permitted values of top between 1 - 500\n     * • 400    Y821 : Dataset not supported\n     * • 400    Y820 : The additionalDataSet is not supported for Get provider API\n     * • 400    Y824 : The maximum number of providerId permitted is 5\n     *     "
      operationId: 'App\Action\BankFeedAction::getProvidersAction'
      parameters:
        -
          name: user_id
          in: query
          description: 'Local user id'
          required: true
          schema:
            type: integer
        -
          name: top
          in: query
          description: 'Top quantity of providers to be listed'
          required: false
          schema:
            type: integer
        -
          name: skip
          in: query
          description: 'Skip a number of providers'
          required: false
          schema:
            type: integer
        -
          name: count
          in: query
          description: 'Set to return the quantity of providers available from bankfeeds providers'
          required: false
          schema:
            type: boolean
        -
          name: name
          in: query
          description: 'List of providers with this keyword'
          required: false
          schema:
            type: string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/bankfeed/2.0/ydl/1.1/cobrand/public_key:
    post:
      operationId: 'App\Action\BankFeedAction::getCobrandPublicKeyAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/bankfeed/2.0/ydl/1.1/providers/details:
    get:
      operationId: 'App\Action\BankFeedAction::getProviderDetailsByIDAction'
      parameters:
        -
          name: user_id
          in: query
          description: 'Local user id'
          required: true
          schema:
            type: integer
        -
          name: id
          in: query
          description: 'Provider id'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/bankfeed/2.0/ydl/1.1/providers/count:
    get:
      operationId: 'App\Action\BankFeedAction::getProvidersCountAction'
      parameters:
        -
          name: user_id
          in: query
          description: 'Local user id'
          required: true
          schema:
            type: integer
        -
          name: priority
          in: query
          description: 'search priority'
          required: false
          schema:
            type: integer
        -
          name: skip
          in: query
          description: 'skip (Min 0) - this is not applicable along with ''name'' parameter'
          required: false
          schema:
            type: integer
        -
          name: top
          in: query
          description: 'top (Max 500) - this is not applicable along with ''name'' parameter'
          required: false
          schema:
            type: integer
        -
          name: dataset$filter
          in: query
          description: 'expression to filter the providers by dataset(s) or dataset attribute(s)-  the default value will be the dataset or dataset attibutes enabled for the customer'
          required: false
          schema:
            type: string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/bankfeed/2.0/ydl/1.1/providers/accounts:
    post:
      description: "\n     * Bankfeeds (Third party) APi call reference: get /providerAccounts?providerId=123 Add Account.\n     * ********************************************************************************************************************\n     * Implementation Notes\n     *\n     * The add account service is used to link the user's account with the provider site in the Yodlee system. Providers that require multifactor authentication or open banking are also supported by this service. The response includes the Yodlee generated ID (providerAccountId) of the account along with the refresh information.\n     *\n     * Open Banking Implementation Notes:\n     * To link the user's account of the Open Banking provider site in the Yodlee system, pass the field entity that contains:\n     * 1. id - From the authParameters provided in the get provider details service\n     * 2. value - From the redirect URL of the Open Banking site\n     *\n     * Credential-based Implementation Notes:\n     * 1. The loginForm or the field array are the objects under the provider object, obtained from the get provider details service response.\n     * 2. The credentials provided by the user should be embedded in the loginForm or field array object.\n     * 3. While testing the PKI feature, encrypt the credentials using the encryption utility.\n     * 4. The data to be retrieved from the provider site can be passed using datasetName or dataset. If datasetName is passed, all the attributes that are implicitly configured for the dataset will be retrieved.\n     * 5. If the customer has not subscribed to the REFRESH event webhooks notification for accounts that require multifactor authentication (MFA), the get providerAccount service has to be called continuously till the login form (supported types are token, question & answer, and captcha) is returned in the response.\n     * 6. The update account service should be called to post the MFA information to continue adding the account.\n     *\n     * Generic Implementation Notes:\n     * 1. Refer to the add account flow chart for implementation.\n     * 2. The get provider account details has webhooks support. If the customer has subscribed to the REFRESH event notification and has invoked this service to add an account, relevant notifications will be sent to the callback URL.\n     * 3. If you had not subscribed for notifications, the get provider account details service has to be polled continuously till the account addition status is FAILED or PARTIAL_SUCCESS or SUCCESS.\n     * 4. A dataset may depend on another dataset for retrieval, so the response will include the requested datasets and the dependent datasets.\n     * It is necessary to check all the dataset additional statuses returned in the response, as the provider account status is drawn from the dataset additional statuses.\n     * 5. Pass linkedProviderAccountId in the input to link a user's credential-based providerAccount with the open banking providerAccount. Ensure that the credential-based providerAccount belongs to the same institution.\n     * 6. The content type has to be passed as application/json in the body parameter.\n     * ********************************************************************************************************************\n     * Bankfeeds (Third party) APi call reference: get /providerAccounts?providerAccountIds=123,234,345 Update Account.\n     * Implementation Notes\n     *\n     * Credential-based Implementation Notes:\n     * The update account API is used to:\n     * • Retrieve the latest information for accounts that belong to one providerAccount from the provider site. You must allow at least 15 min between requests.\n     * • Update account credentials when the user has changed the authentication information at the provider site.\n     * • Post MFA information for the MFA-enabled provider accounts during add and update accounts.\n     * • Retrieve the latest information of all the eligible accounts that belong to the user.\n     *\n     * Edit Credentials - Notes:\n     * • If credentials have to be updated in the Yodlee system, one of the following should be provided:\n     * ◦ LoginForm\n     * ◦ Field array\n     * • LoginForm or the field array, can be obtained from the GET providerAccounts/{providerAccountId}?include=credentials API response.\n     * • The credentials provided by the user should be embedded in the loginForm or field array object before you pass to this API.\n     *\n     * Posting MFA Info - Notes:\n     * 1. You might receive the MFA request details to be presented to the end user in the GET providerAccounts/{providerAccount} API during polling or through REFRESH webhooks notificaiton.\n     * 2. After receiving the inputs from your user:\n     * a.Embed the MFA information provided by the user in the loginForm or field array object.\n     * b.Pass one of the following objects as input to this API:\n     * • LoginForm\n     * • Field array\n     *\n     * Points to consider:\n     * • Data to be retrieved from the provider site can be overridden using datasetName or dataset. If you do pass datasetName, all the datasets that are implicitly configured for the dataset will be retrieved. This action is allowed for edit credentials and single provider account refresh flows only.\n     * • Encrypt the credential and MFA information using the public key, as explained on this page.\n     * • Public key encryption of PII fields is not supported in the sandbox environment. For development and production environments, please follow the advice on this page.\n     *\n     * --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     * Open Banking (OB)-based Authentication - Notes:\n     * The update account API is used to:\n     * • Retrieve the latest information for accounts from the provider site.\n     * • Update the renewed consent for an existing provider account.\n     * • Retrieve the latest information for all the eligible accounts that belong to the user.\n     *\n     * Yodlee recommendations:\n     * • Create the field entity with the authParameters provided in the get provider details API.\n     * • Populate the field entity with the values received from the OB site and pass it to this API.\n     *\n     * ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     * Update All Eligible Accounts - Notes:\n     * • This API will trigger a refresh for all the eligible provider accounts(both OB and credential-based accounts).\n     * • This API will not refresh closed, inactive, or UAR accounts, or accounts with refreshes in-progress or recently refreshed non-OB accounts.\n     * • No parameters should be passed to this API to trigger this action.\n     * • Do not call this API often. Our recommendation is to call this only at the time the user logs in to your app because it can hamper other API calls performance.\n     * • The response only contains information for accounts that were refreshed. If no accounts are eligible for refresh, no response is returned.\n     *\n     * ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     * What follows are common to both OB and credential-based authentication implementations:\n     * • Check the status of the providerAccount before invoking this API. Do not call this API to trigger any action on a providerAccount when an action is already in progress for the providerAccount.\n     * • If the customer has subscribed to the REFRESH event notification and invoked this API, relevant notifications will be sent to the customer.\n     * • A dataset may depend on another dataset for retrieval, so the response will include the requested and dependent datasets.\n     * • Check all the dataset additional statuses returned in the response because the provider account status is drawn from the dataset additional statuses.\n     * • Updating preferences using this API will trigger refreshes.\n     * • Pass linkedProviderAccountId in the input to link a user’s credential-based providerAccount with the OB providerAccount or viceversa. Ensure that the both the providerAccounts belong to the same institution.\n     * • The content type has to be passed as application/json for the body parameter\n     * Possible Yodlee responses:\n     * • 400    Y805 : Multiple providerAccountId not supported for updating credentials\n     * • 400    Y800 : Invalid value for providerAccountsParam\n     * • 400    Y812 : Required field/value - field.id missing in the providerAccountsParam\n     * • 400    Y812 : Required field/value - field.value missing in the providerAccountsParam\n     * • 400    Y806 : Invalid input\n     * • 400    Y823 : Credentials are not applicable for real estate aggregated / manual accounts\n     * • 400    Y852 : Duplicate dataset name cannot be passed in the input.\n     * • 400    Y853 : Dataset and datasetName parameters cannot be passed simultaneously\n     * "
      operationId: 'App\Action\BankFeedAction::getProvidersAccountsAction'
      parameters:
        -
          name: user_id
          in: query
          description: 'Local user id'
          required: true
          schema:
            type: integer
        -
          name: providerAccountIds
          in: query
          description: 'THIS IS A REQUIRED FIELD FOR ADDING AN ACCOUNT ONLY. Provider ACCOUNT ids. CSV providerAccountIds. Used in Update Account only.'
          schema:
            type: string
        -
          name: providerId
          in: query
          description: 'THIS IS A REQUIRED FIELD FOR ADDING AN ACCOUNT ONLY. Provider id. Used in Add Account only'
          schema:
            type: integer
        -
          name: loginForm
          in: query
          description: 'Login form aquired of get providers details'
          required: true
          schema:
            type: object
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/bankfeed/2.0/ydl/1.1/providers/accounts/details:
    post:
      description: "Bankfeeds (Third party) APi call reference: get /providerAccounts/{providerAccountId} Get Provider Account Details.\n     * Implementation Notes\n     * The get provider account details service is used to learn the status of adding accounts and updating accounts.\n     * This service has to be called continuously to know the progress level of the triggered process. This service also provides the MFA information requested by the provider site.\n     * When include=credentials,questions is passed as input, the service returns the credentials (non-password values) and questions stored in the Yodlee system for that provider account.\n     * Note: The password and answer fields are not returned in the response.\n     * Possible Yodlee responses: error -> 400, message -> Y800 : Invalid value for providerAccountId or error -> 400, message -> Y816 : questions can only be requested for questionAndAnswer Supported Sites"
      operationId: 'App\Action\BankFeedAction::getProvidersAccountsDetailsAction'
      parameters:
        -
          name: user_id
          in: query
          description: 'Local user id'
          required: true
          schema:
            type: integer
        -
          name: providerAccountId
          in: query
          description: 'Provider account id'
          required: true
          schema:
            type: integer
        -
          name: include
          in: query
          description: 'credentials,questions,preferences'
          required: false
          schema:
            type: string
        -
          name: requestId
          in: query
          description: 'The unique identifier for the request that returns contextual data'
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /2.0/user/bankfeed/2.0/ydl/1.1/transactions:
    get:
      description: "\n     * Implementation Notes\n     *\n     * The Transaction service is used to get a list of transactions for a user.\n     * By default, this service returns the last 30 days of transactions from today's date.\n     * The keyword parameter performs a contains search on the original, consumer, and simple description\n     * attributes, replace the special characters #, &, and + with percent-encoding values %23, %26, and %2B respectively.\n     * Eg: for -Debit# , pass the input as -Debit%23.\n     * Values for categoryId parameter can be fetched from get transaction category list service.\n     * The categoryId is used to filter transactions based on system-defined category as well as user-defined category.\n     * User-defined categoryIds should be provided in the filter with the prefix 'U'. E.g. U10002\n     * The skip and top parameters are used for pagination. In the skip and top parameters pass the number of records to be skipped and retrieved, respectively. The response header provides the links to retrieve the next and previous set of transactions.\n     * Double quotes in the merchant name will be prefixed by backslashes (\\) in the response,\n     * e.g. Toys \\'R\\' Us.\n     * Note\n     * TDE is made available for bank and card accounts and for the US market only.The address field in the response is available only when the TDE key is turned on.\n     * accountReconType input parameter is relevant for investment accounts, provided the reconciliation feature is turned on.\n     * accountReconType input parameter will be ignored when container value passed is other than 'INVESTMENT'.\n     * accountReconType input parameter will be ignored when accountId(s) are passed.\n     * The pagination feature is available by default. If no values are passed in the skip and top parameters, the API will only return the first 500 transactions.\n     *     "
      operationId: 'App\Action\BankFeedAction::getAccountsTransactionsAction'
      parameters:
        -
          name: user_id
          in: query
          description: 'Local user id'
          required: true
          schema:
            type: integer
        -
          name: container
          in: query
          description: bank/creditCard/investment/insurance/loan
          required: true
          schema:
            type: string
        -
          name: baseType
          in: query
          description: DEBIT/CREDIT
          schema:
            type: string
        -
          name: keyword
          in: query
          description: 'Transaction search text'
          schema:
            type: string
        -
          name: accountId
          in: query
          description: 'CSV accountIds'
          schema:
            type: string
        -
          name: fromDate
          in: query
          description: 'Transaction from date(YYYY-MM-DD)'
          schema:
            type: string
        -
          name: toDate
          in: query
          description: 'Transaction end date (YYYY-MM-DD)'
          schema:
            type: string
        -
          name: categoryId
          in: query
          description: 'CSV categoryIds'
          schema:
            type: string
        -
          name: highLevelCategoryId
          in: query
          description: 'CSV highLevelCategoryIds'
          schema:
            type: string
        -
          name: type
          in: query
          description: 'Transaction Type(Supported containers: bank/card/investment)'
          schema:
            type: string
        -
          name: categoryType
          in: query
          description: 'Transaction Category Type(UNCATEGORIZE, INCOME, TRANSFER, EXPENSE or DEFERRED_COMPENSATION)'
          schema:
            type: string
        -
          name: skip
          in: query
          description: 'skip (Min 0)'
          schema:
            type: integer
        -
          name: top
          in: query
          description: ' top (Max 500)'
          schema:
            type: integer
        -
          name: detailCategoryId
          in: query
          description: 'CSV detailCategoryIds'
          schema:
            type: string
        -
          name: date
          in: query
          description: 'Our internal parameters'
          schema:
            type: string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/bankfeed/2.0/ydl/1.1/providers/accounts/list:
    post:
      operationId: 'App\Action\BankFeedAction::getProvidersAccountsListAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/bankfeed/2.0/ydl/1.1/statements:
    post:
      operationId: 'App\Action\BankFeedAction::getBankFeedStatementsAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/bankfeed/2.0/ydl/1.1/documents:
    post:
      operationId: 'App\Action\BankFeedAction::getBakFeedDocumentsAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/bankfeed/2.0/ydl/1.1/users/register:
    get:
      description: "This is a registration within the bankfeeds provider only\n     *\n     * Implementation Notes\n     *\n     * The register user service is used to register a user in Yodlee.\n     * The loginName cannot include spaces and must be between 3 and 150 characters.\n     * locale passed must be one of the supported locales for the customer.\n     * Currency provided in the input will be respected in the derived services and the amount fields in the response will be provided in the preferred currency.\n     * userParam is accepted as a body parameter.\n     * Note: The content type has to be passed as application/json for the body parameter. "
      operationId: 'App\Action\BankFeedAction::getBankFeedRegisterUserAction'
      parameters:
        -
          name: user_id
          in: query
          description: 'Local user id'
          required: true
          schema:
            type: integer
        -
          name: user
          in: query
          description: 'Local user id'
          required: true
          schema:
            type: object
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/bankfeed/2.0/ydl/1.1/users/unregister:
    post:
      operationId: 'App\Action\BankFeedAction::getBankFeedUnregisterUserAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/bankfeed/2.0/ydl/1.1/users:
    post:
      operationId: 'App\Action\BankFeedAction::getBankFeedRegisteredUserAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/bankfeed/2.0/ydl/1.1/users/update:
    post:
      operationId: 'App\Action\BankFeedAction::getBankFeedRegisteredUserUpdateAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/bankfeed/2.0/ydl/1.1/accounts:
    get:
      description: "\n     * Implementation Notes\n     *\n     * The get accounts service provides information about accounts added by the user.\n     * By default, this service returns information for active and to be closed accounts.\n     * If requestId is provided, the accounts that are updated in the context of the requestId will be provided in the response.\n     *     "
      operationId: 'App\Action\BankFeedAction::getBankFeedAccountsAction'
      parameters:
        -
          name: user_id
          in: query
          description: 'Local user id'
          required: true
          schema:
            type: integer
        -
          name: status
          in: query
          description: ACTIVE/INACTIVE/TO_BE_CLOSED/CLOSED
          schema:
            type: string
        -
          name: container
          in: query
          description: bank/creditCard/investment/insurance/loan/reward/bill/realEstate/otherAssets/otherLiabilities.
          required: true
          schema:
            type: string
        -
          name: providerAccountId
          in: query
          description: 'The provider account identification number aka providerAccountId'
          schema:
            type: integer
        -
          name: accountId
          in: query
          description: 'CSV accountIds'
          schema:
            type: string
        -
          name: accountReconType
          in: query
          description: 'UNRECONCILED (Default value), RECONCILED'
          schema:
            type: string
        -
          name: include
          in: query
          description: 'profile, holder, fullAccountNumber'
          schema:
            type: string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/bankfeed/2.0/ydl/1.1/accounts/add:
    post:
      operationId: 'App\Action\BankFeedAction::getBankFeedAddAccountAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/bankfeed/2.0/ydl/1.1/accounts/delete:
    post:
      operationId: 'App\Action\BankFeedAction::getBankFeedDeleteAccountAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/bankfeed/2.0/ydl/1.1/accounts/update:
    post:
      operationId: 'App\Action\BankFeedAction::getBankFeedUpdateAccountAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/bankfeed/2.0/ydl/1.1/accounts/details:
    post:
      operationId: 'App\Action\BankFeedAction::getBankFeedDetailsAccountAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/bankfeed/2.0/ydl/1.1/providers/accounts/profile:
    post:
      operationId: 'App\Action\BankFeedAction::getBankFeedProviderProfileAccountAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/bankfeed/2.0/ydl/1.1/accounts/historical_balances:
    post:
      operationId: 'App\Action\BankFeedAction::getBankFeedHistoricalBalancesAccountAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/admin/category/group/add:
    post:
      operationId: 'App\Action\CategoryAction::storeChartAccountsGroupAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/admin/category/group:
    post:
      operationId: 'App\Action\CategoryAction::getChartAccountsGroupListAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/admin/category/group/delete:
    post:
      operationId: 'App\Action\CategoryAction::deleteChartAccountsGroupAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/admin/category/group/status:
    post:
      operationId: 'App\Action\CategoryAction::statusChartAccountsGroupAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/admin/category/grouplist:
    post:
      operationId: 'App\Action\CategoryAction::listChartAccountsGroupAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/admin/category/type/add:
    post:
      operationId: 'App\Action\CategoryAction::storeChartAccountsTypeAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/admin/category/type:
    post:
      operationId: 'App\Action\CategoryAction::getChartAccountsTypeListAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/admin/category/type/delete:
    post:
      operationId: 'App\Action\CategoryAction::deleteChartAccountsTypeAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/admin/category/type/status:
    post:
      operationId: 'App\Action\CategoryAction::statusChartAccountsTypeAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/admin/category/typelist:
    post:
      operationId: 'App\Action\CategoryAction::listChartAccountsTypeAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/admin/category/account/add:
    post:
      operationId: 'App\Action\CategoryAction::storeCategoryAccountsAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/admin/category/account/get:
    post:
      operationId: 'App\Action\CategoryAction::getCategoryAccountAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/admin/category/account:
    post:
      operationId: 'App\Action\CategoryAction::getCategoryAccountListAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/account/item/list:
    post:
      operationId: 'App\Action\CategoryAction::getAccountItemListAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/admin/category/account/delete:
    post:
      description: 'Method used by two routes: /1.0/admin/category/item/delete and /1.0/admin/category/account/delete'
      operationId: 'App\Action\CategoryAction::deleteCategoryAccountAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/admin/category/account/status:
    post:
      description: 'Method in use by two routes: /1.0/admin/category/item/status and /1.0/admin/category/account/status'
      operationId: 'App\Action\CategoryAction::statusCategoryAccountAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/category/account/expense:
    get:
      operationId: 'App\Action\CategoryAction::categoryExpenseTypeAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/category/account/depreciation:
    get:
      operationId: 'App\Action\CategoryAction::categoryDepreciationTypeAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/admin/category/accountlist:
    post:
      operationId: 'App\Action\CategoryAction::listCategoryaccountAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/admin/category/item:
    post:
      operationId: 'App\Action\CategoryAction::getCategoryItemListAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/admin/category/item/add:
    post:
      operationId: 'App\Action\CategoryAction::storeCategoryItemsAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /PLACEHOLDER-deleteCategoryItemAction:
    post:
      operationId: 'App\Action\CategoryAction::deleteCategoryItemAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /PLACEHOLDER-statusCategoryItemAction:
    post:
      summary: 'NO OPEN API DOCUMENTATION SETUP FOR THIS METHOD'
      operationId: 'App\Action\CategoryAction::statusCategoryItemAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/categoryList:
    post:
      operationId: 'App\Action\CategoryAction::categoryListAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/admin/summary/addEdit:
    post:
      operationId: 'App\Action\CategoryAction::addSummaryAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/admin/summary/statusUpdate:
    post:
      operationId: 'App\Action\CategoryAction::statusActivateAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/admin/summary/list:
    post:
      operationId: 'App\Action\CategoryAction::getListAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/admin/summary/category/list:
    post:
      operationId: 'App\Action\CategoryAction::acountitemSummarylistAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/admin/summary/label/list:
    post:
      operationId: 'App\Action\CategoryAction::labelListAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/admin/category/itemById:
    post:
      operationId: 'App\Action\CategoryAction::categoryEditByIdAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /PLACEHOLDER-getTaxablepropertyCountAction:
    post:
      operationId: 'App\Action\CategoryAction::getTaxablepropertyCountAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/dashboard:
    post:
      operationId: 'App\Action\DashboardAction::dashboardAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/worktankDashboard:
    post:
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /PLACEHOLDER-getDepreciationValueAction:
    post:
      operationId: 'App\Action\DepreciationAction::getDepreciationValueAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/depreciation/documentUpload:
    post:
      operationId: 'App\Action\DepreciationAction::documentUploadAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/depreciation/documentDelete:
    post:
      operationId: 'App\Action\DepreciationAction::documentRemoveAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/depreciation/add:
    post:
      description: 'This method is used by three different routes which includes /1.0/user/depreciation/add and /1.0/user/depreciation/addCapital as well as /1.0/user/depreciation/addOffline'
      operationId: 'App\Action\DepreciationAction::addDepreciationAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/getDepreciationList:
    post:
      operationId: 'App\Action\DepreciationAction::getDepreciationListAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/getDepreciationCapitalList:
    post:
      operationId: 'App\Action\DepreciationAction::getDepreciationCapitalListAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/getDepreciationDetail:
    post:
      operationId: 'App\Action\DepreciationAction::getDepreciationDetailAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/category/addGroupcategory:
    post:
      operationId: 'App\Action\DepreciationAction::addGroupcategoryAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/category/editGroupcategory:
    post:
      operationId: 'App\Action\DepreciationAction::editGroupcategoryAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/category/listGroupcategory:
    post:
      operationId: 'App\Action\DepreciationAction::listGroupcategoryAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/category/deleteGroupcategory:
    post:
      operationId: 'App\Action\DepreciationAction::deleteGroupcategoryAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/depreciation/edit:
    post:
      operationId: 'App\Action\DepreciationAction::editDepreciationAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/depreciation/writeoff:
    post:
      operationId: 'App\Action\DepreciationAction::depreciationWriteoffAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/depreciation/balanceSummary:
    post:
      operationId: 'App\Action\DepreciationAction::depreciationBalanceSummaryAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/depreciation/replace:
    post:
      operationId: 'App\Action\DepreciationAction::depreciationReplaceAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/depreciation/delete:
    post:
      operationId: 'App\Action\DepreciationAction::deleteDepreciationAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/depreciation/lvp:
    post:
      operationId: 'App\Action\DepreciationAction::depreciationSetLvpAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/depreciationType/update:
    post:
      operationId: 'App\Action\DepreciationAction::updateDepreciationTypeAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/getDepreciationValue:
    post:
      operationId: 'App\Action\DepreciationAction::getDepreciationClaimAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/incomeAddForecasting:
    post:
      operationId: 'App\Action\ForecastingIncomeDetailsAction::addUserForecastingIncomeDetailAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/workSummary:
    post:
      operationId: 'App\Action\ForecastingIncomeDetailsAction::userSalaryCalculationsAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/listEmployer:
    post:
      operationId: 'App\Action\ForecastingIncomeDetailsAction::listEmployerEntityAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/dropdown/employer:
    post:
      operationId: 'App\Action\ForecastingIncomeDetailsAction::getEmployerAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /2.0/user/notifications:
    get:
      tags:
        - notifications
      summary: 'GET /notifications - return list of all user''s notifications with deleted_on timestamp is null'
      description: 'GET /notifications - return list of all user''s notifications with deleted_on timestamp is null'
      operationId: 'App\Action\NotificationAction::getNotifications'
      parameters:
        -
          name: user_id
          in: query
          description: 'Local user id'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { description: 'GET /notifications - return list of all user''s notifications with deleted_on timestamp is null', type: string }
                  data: { description: 'GET /notifications - return list of all user''s notifications with deleted_on timestamp is null', type: string }
                  message: { description: 'GET /notifications - return list of all user''s notifications with deleted_on timestamp is null', type: string }
                type: object
        '500':
          description: failure
          content:
            application/json:
              schema:
                properties:
                  status: { description: 'GET /notifications - return list of all user''s notifications with deleted_on timestamp is null', type: string }
                  data: { description: 'GET /notifications - return list of all user''s notifications with deleted_on timestamp is null', type: string }
                  message: { description: 'GET /notifications - return list of all user''s notifications with deleted_on timestamp is null', type: string }
                type: object
    post:
      tags:
        - notifications
      summary: 'POST /notifications - add notification against an user and an accountant'
      description: 'POST /notifications - add notification against an user and an accountant'
      operationId: 'App\Action\NotificationAction::addNotification'
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
                - creator_id
                - recipient_id
                - message
                - type
              properties:
                creator_id:
                  description: 'id of the creator'
                  type: integer
                recipient_id:
                  description: 'id of the recipient'
                  type: integer
                subject:
                  description: 'the subject of the message to be sent'
                  type: string
                message:
                  description: 'the body of the message to be sent'
                  type: string
                type:
                  description: 'the type of message'
                  type: string
                action_id:
                  description: 'the action id associated with the message'
                  type: integer
                module:
                  description: 'the module associated with the message'
                  type: string
              type: object
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { description: 'POST /notifications - add notification against an user and an accountant', type: string }
                  data: { description: 'POST /notifications - add notification against an user and an accountant', type: string }
                  message: { description: 'POST /notifications - add notification against an user and an accountant', type: string }
                type: object
        '500':
          description: failure
          content:
            application/json:
              schema:
                properties:
                  status: { description: 'POST /notifications - add notification against an user and an accountant', type: string }
                  data: { description: 'POST /notifications - add notification against an user and an accountant', type: string }
                  message: { description: 'POST /notifications - add notification against an user and an accountant', type: string }
                type: object
  '/2.0/user/notifications/{enquiry_id}':
    delete:
      tags:
        - notifications
      summary: 'DELETE /notifications - return list of all user''s notifications with deleted_on timestamp is null'
      description: 'GET /notifications - return list of all user''s notifications with deleted_on timestamp is null'
      operationId: 'App\Action\NotificationAction::deleteNotification'
      parameters:
        -
          name: enquiry_id
          in: path
          description: 'The actual notification id in the database'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { description: 'DELETE /notifications - return list of all user''s notifications with deleted_on timestamp is null', type: string }
                  data: { description: 'DELETE /notifications - return list of all user''s notifications with deleted_on timestamp is null', type: string }
                  message: { description: 'DELETE /notifications - return list of all user''s notifications with deleted_on timestamp is null', type: string }
                type: object
        '500':
          description: failure
          content:
            application/json:
              schema:
                properties:
                  status: { description: 'DELETE /notifications - return list of all user''s notifications with deleted_on timestamp is null', type: string }
                  data: { description: 'DELETE /notifications - return list of all user''s notifications with deleted_on timestamp is null', type: string }
                  message: { description: 'DELETE /notifications - return list of all user''s notifications with deleted_on timestamp is null', type: string }
                type: object
  /1.0/user/property/header:
    post:
      description: ''
      operationId: 'App\Action\PropertyAction::getHeaderAction'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              required:
                - user_id
                - property_id
                - year
              properties:
                user_id:
                  description: 'id of the user'
                  type: integer
                property_id:
                  description: 'id of the property'
                  type: integer
                year:
                  description: 'the financial year required'
                  type: integer
              type: object
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  code: { type: string }
                  data: { type: object }
                type: object
  /1.0/user/property/sold:
    post:
      description: ''
      operationId: 'App\Action\PropertyAction::propertySoldAction'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              required:
                - user_id
                - property_id
              properties:
                user_id:
                  description: 'id of the user'
                  type: integer
                property_id:
                  description: 'id of the property'
                  type: integer
                sold_date:
                  description: 'sold date'
                  type: string
                contract_sale_date:
                  description: 'contract sale date'
                  type: string
                sale_amount:
                  description: 'sale amount'
                  type: string
                sale_expenses:
                  description: 'sale expenses'
                  type: string
              type: object
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  data: { type: object }
                  message: { type: string }
                  code: { type: integer }
                type: object
  /1.0/user/category/property:
    post:
      description: ''
      operationId: 'App\Action\PropertyAction::getCatPropertyAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  message: { type: string }
                  data: { type: object }
                type: object
  /1.0/user/addproperty:
    post:
      description: ''
      operationId: 'App\Action\PropertyAction::addPropertyAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  code: { type: string }
                  property_ids: { type: object }
                type: object
  /missing_route:
    get:
      description: ''
      operationId: 'App\Action\PropertyAction::getNetCrossFeesAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  code: { type: string }
                  property_ids: { type: object }
                  info: { type: object }
                type: object
  /1.0/user/properyget:
    post:
      description: ''
      operationId: 'App\Action\PropertyAction::getPropertyAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  code: { type: string }
                  data: { type: object }
                type: object
  /1.0/user/addloan:
    post:
      description: ''
      operationId: 'App\Action\PropertyAction::addPropertyLoanAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  code: { type: string }
                  message: { type: string }
                type: object
  /1.0/user/updateloan:
    post:
      description: ''
      operationId: 'App\Action\PropertyAction::updatePropertyLoanAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  code: { type: string }
                  message: { type: string }
                type: object
  /1.0/user/updateproperty:
    post:
      description: ''
      operationId: 'App\Action\PropertyAction::updatePropertyAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  code: { type: integer }
                  message: { type: string }
                type: object
  /1.0/user/getCapitalCost:
    post:
      description: ''
      operationId: 'App\Action\PropertyAction::getCapitalCostAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  code: { type: string }
                  data: { type: object }
                type: object
  /1.0/user/getloan:
    post:
      description: ''
      operationId: 'App\Action\PropertyAction::getPropertyLoanAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  code: { type: string }
                  data: { type: object }
                type: object
  /1.0/user/add/loanForecasting:
    post:
      description: 'This is in use by two different routes which includes /1.0/user/edit/loanForecastingedit as well as /1.0/user/add/loanForecasting'
      operationId: 'App\Action\PropertyAction::loanForecastingAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  code: { type: string }
                  message: { type: string }
                type: object
  /1.0/user/list/loanForecasting:
    post:
      description: ''
      operationId: 'App\Action\PropertyAction::loanForecastingListAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  code: { type: string }
                  data: { type: object }
                type: object
  /1.0/user/getpropertydetails:
    post:
      description: ''
      operationId: 'App\Action\PropertyAction::getpropertydetailsAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  code: { type: string }
                  data: { type: object }
                type: object
  /1.0/user/add/propertyForecasting:
    post:
      description: ''
      operationId: 'App\Action\PropertyAction::propertyForecastingAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  code: { type: string }
                  message: { type: string }
                type: object
  /1.0/user/edit/propertyForecastingedit:
    post:
      description: ''
      operationId: 'App\Action\PropertyAction::propertyForecastingeditAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  code: { type: string }
                  message: { type: string }
                type: object
  /1.0/user/list/propertyForecasting:
    post:
      description: ''
      operationId: 'App\Action\PropertyAction::listPropertyForecastingAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  data: { type: object }
                  code: { type: integer }
                type: object
  /1.0/user/property/shareList:
    post:
      description: ''
      operationId: 'App\Action\PropertyAction::propertyShareListAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  data: { type: object }
                  code: { type: integer }
                type: object
  /1.0/user/cron/propertyForecast:
    get:
      description: ''
      operationId: 'App\Action\PropertyAction::propertyForecastingCronAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  code: { type: string }
                  message: { type: string }
                type: object
  /1.0/user/property/inviteRequest:
    post:
      description: ''
      operationId: 'App\Action\PropertyAction::inviteRequestAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  code: { type: string }
                  message: { type: string }
                type: object
  /1.0/user/property/pendingRemainder:
    post:
      description: ''
      operationId: 'App\Action\PropertyAction::pendingRemainderAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  code: { type: string }
                  message: { type: string }
                type: object
  /1.0/user/property/inviteList:
    post:
      description: ''
      operationId: 'App\Action\PropertyAction::inviteListAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  code: { type: string }
                  data: { type: object }
                type: object
  /1.0/user/property/inviteProcess:
    post:
      description: ''
      operationId: 'App\Action\PropertyAction::inviteProcessAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  code: { type: string }
                  message: { type: string }
                type: object
  /1.0/user/property/holders:
    post:
      description: ''
      operationId: 'App\Action\PropertyAction::inviteHoldersAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  code: { type: string }
                  data: { type: object }
                type: object
  /1.0/user/property/invitePermission:
    post:
      description: ''
      operationId: 'App\Action\PropertyAction::invitePermissionAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  code: { type: string }
                  data: { type: object }
                type: object
  /1.0/user/getForecasts:
    post:
      description: ''
      operationId: 'App\Action\PropertyAction::getForecastsAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  code: { type: string }
                  data: { type: object }
                type: object
  /1.0/user/addForecastCurrentValue:
    post:
      description: ''
      operationId: 'App\Action\PropertyAction::addForecastCurrentValueAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  code: { type: string }
                  message: { type: string }
                  data: { type: object }
                type: object
  /1.0/user/getCoreLogicToken:
    post:
      description: ''
      operationId: 'App\Action\PropertyAction::getCoreLogicTokenAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  message: { type: string }
                  code: { type: string }
                  data: { type: object }
                type: object
  /1.0/user/getForecastList:
    post:
      description: ''
      operationId: 'App\Action\PropertyAction::getForecastListAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  code: { type: string }
                  data: { type: object }
                type: object
  /1.0/user/getCategory:
    post:
      description: ''
      operationId: 'App\Action\PropertyAction::getPropertyCatAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  code: { type: string }
                  data: { type: object }
                type: object
  /1.0/user/getBorrowingExpense:
    post:
      description: ''
      operationId: 'App\Action\PropertyAction::getBorrowingExpenseAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  code: { type: string }
                  data: { type: object }
                type: object
  /1.0/user/property/inviteEdit:
    post:
      description: ''
      operationId: 'App\Action\PropertyAction::inviteEditAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  data: { type: object }
                  code: { type: string }
                type: object
  /1.0/user/property/inviteUpdate:
    post:
      description: ''
      operationId: 'App\Action\PropertyAction::inviteSaveAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  message: { type: string }
                  code: { type: integer }
                type: object
  /1.0/user/shareRemove:
    post:
      description: ''
      operationId: 'App\Action\PropertyAction::shareRemoveAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  message: { type: string }
                  code: { type: integer }
                type: object
  /1.0/user/property/list:
    post:
      description: ''
      operationId: 'App\Action\PropertyAction::propertyListAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  data: { type: object }
                type: object
  /1.0/user/loan/paidoff:
    post:
      description: ''
      operationId: 'App\Action\PropertyAction::loanPaidOffAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  message: { type: string }
                  code: { type: integer }
                type: object
  /1.0/user/category:
    post:
      operationId: 'App\Action\PropertyCategoryAction::getUserCategoryMasAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/property/dashboard:
    post:
      operationId: 'App\Action\PropertyCategoryAction::getPropertyCategoryAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /PLACEHOLDER-getPropertiesAction:
    post:
      operationId: 'App\Action\PropertyCategoryAction::getPropertiesAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/propertycategory/addEditPropertyCategory:
    post:
      operationId: 'App\Action\PropertyCategoryAction::addEditPropertyCategoryAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/propertycategory/removePropertyCategory:
    post:
      operationId: 'App\Action\PropertyCategoryAction::removePropertyCategoryAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/propertycategory/defaultPropertyCategory:
    post:
      operationId: 'App\Action\PropertyCategoryAction::defaultPropertyCategoryAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/propertycategory/propertyMovement:
    post:
      operationId: 'App\Action\PropertyCategoryAction::propertyMovementAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/propertycategory/propertyMovementList:
    post:
      operationId: 'App\Action\PropertyCategoryAction::propertyMovementListAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/reports/dashboard/ExpenseReport:
    post:
      operationId: 'App\Action\ReportAction::expenseReportAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /PLACEHOLDER-expenseReportCategoryListAction:
    post:
      operationId: 'App\Action\ReportAction::expenseReportCategoryListAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /PLACEHOLDER-expenseReportSharedCategoryListAction:
    post:
      operationId: 'App\Action\ReportAction::expenseReportSharedCategoryListAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/reports/incomeSummary:
    post:
      operationId: 'App\Action\ReportAction::incomeSummaryAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/reports/propertyList:
    post:
      operationId: 'App\Action\ReportAction::propertyListReportAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/reports/incomeSummarychart:
    post:
      operationId: 'App\Action\ReportAction::incomeSummarychartAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/reports/dashboard/profitLoss:
    post:
      operationId: 'App\Action\ReportAction::profitLossAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/reports/dashboard/incomeReport:
    post:
      operationId: 'App\Action\ReportAction::incomeReportAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/reports/dashboard/profitLosschart:
    post:
      operationId: 'App\Action\ReportAction::profitLosschartAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/reports/dashboard/incomechart:
    post:
      operationId: 'App\Action\ReportAction::incomechartAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/share/shareList:
    post:
      operationId: 'App\Action\SharepropertyAction::shareListAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/share/cancel:
    post:
      operationId: 'App\Action\SharepropertyAction::shareCancelAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/getReceipts:
    post:
      operationId: 'App\Action\SpareAction::getReceiptsAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/getSpareCategory:
    get:
      operationId: 'App\Action\SpareAction::getSpareCategoryAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/getSpareDocuments:
    post:
      operationId: 'App\Action\SpareAction::getSpareDocumentsAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/addSpareDocument:
    post:
      operationId: 'App\Action\SpareAction::addSpareDocumentAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/editSpareDocuments:
    post:
      operationId: 'App\Action\SpareAction::editSpareDocumentsAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/deleteSpareDocument:
    post:
      operationId: 'App\Action\SpareAction::deleteSpareDocumentAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/downloadSpareDocument:
    post:
      operationId: 'App\Action\SpareAction::downloadSpareDocumentAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/get/expense:
    post:
      operationId: 'App\Action\TransactionsAction::getExpenseAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/get/incomExpense:
    post:
      operationId: 'App\Action\TransactionsAction::getIncomExpenseAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/expense/history:
    post:
      operationId: 'App\Action\TransactionsAction::getHistoryAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/expense/summary:
    post:
      operationId: 'App\Action\TransactionsAction::getSummaryAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/getproperty/income/add:
    post:
      summary: '/1.0/user/getproperty/income/add and /1.0/user/getproperty/income/edit'
      description: 'The routes /1.0/user/getproperty/income/add and /1.0/user/getproperty/income/edit will target the same action method but in different manner'
      operationId: 'App\Action\TransactionsAction::addEditTransactionAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/document/download:
    post:
      operationId: 'App\Action\TransactionsAction::imageDownloadAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /PLACEHOLDER-imageUploadAction:
    post:
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /PLACEHOLDER-imageDeleteAction:
    post:
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/getproperty/income/details:
    post:
      operationId: 'App\Action\TransactionsAction::getPropertyIncomeDetailsAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/getproperty/income/history:
    post:
      operationId: 'App\Action\TransactionsAction::propertyIncomeHistoryAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/add/receiptUpload:
    post:
      operationId: 'App\Action\TransactionsAction::receiptUploadAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/delete/expenseReceipt:
    post:
      operationId: 'App\Action\TransactionsAction::receiptDeleteAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /PLACEHOLDER-getIncomeFinancialYearAction:
    post:
      operationId: 'App\Action\TransactionsAction::getIncomeFinancialYearAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/getproperty/income/chart:
    post:
      operationId: 'App\Action\TransactionsAction::getIncomeChartAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/income/delete:
    post:
      summary: 'Used by routes /1.0/user/income/delete and /1.0/user/expense/delete as well as /1.0/user/delete/expense'
      description: 'Used by routes /1.0/user/income/delete and /1.0/user/expense/delete as well as /1.0/user/delete/expense'
      operationId: 'App\Action\TransactionsAction::transactionDeleteAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /PLACEHOLDER-incomeDeleteAction:
    post:
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/getproperty/income/deleteReceipt:
    post:
      operationId: 'App\Action\TransactionsAction::incomeDeleteReceiptAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/income/historyById:
    post:
      summary: 'Used by routes /1.0/user/income/historyById and /1.0/user/expense/historyById'
      description: 'Used by routes /1.0/user/income/historyById and /1.0/user/expense/historyById'
      operationId: 'App\Action\TransactionsAction::transactionByIdAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/getproperty/income/deletefeesincome:
    post:
      operationId: 'App\Action\TransactionsAction::deleteFeesIncomeAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/expense/chart:
    post:
      operationId: 'App\Action\TransactionsAction::getexpenseChartAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/getproperty/propertyUpload:
    post:
      operationId: 'App\Action\TransactionsAction::propertyUploadAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/delete/propertyImagedelete:
    post:
      operationId: 'App\Action\TransactionsAction::propertyImagedeleteAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /PLACEHOLDER-addexpenseWorkTankAction:
    post:
      operationId: 'App\Action\TransactionsAction::addexpenseWorkTankAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/worktank/header:
    post:
      operationId: 'App\Action\TransactionsAction::getHeaderworkTankAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/getYearList:
    post:
      operationId: 'App\Action\TransactionsAction::getYearListAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/commonReciptdownload:
    post:
      operationId: 'App\Action\TransactionsAction::commonReciptdownloadAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /PLACEHOLDER-addModifyAccountSetupAction:
    post:
      operationId: 'App\Action\UserAccountSetupAction::addModifyAccountSetupAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/account/addModify:
    post:
      operationId: 'App\Action\UserAccountSetupAction::addModifyUserAccountSetupAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/account/getReport:
    post:
      operationId: 'App\Action\UserAccountSetupAction::getUserAccountSetupAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/accountant/inviteRequest:
    post:
      operationId: 'App\Action\UserAccountantAction::userAccountantInviteRequestAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/accountant/inviteApproval:
    post:
      operationId: 'App\Action\UserAccountantAction::inviteApprovalAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/accountant/clientDetail:
    post:
      operationId: 'App\Action\UserAccountantAction::clientDetailAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/accountant/accountantDropdown:
    post:
      operationId: 'App\Action\UserAccountantAction::accountantDropdownAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/accountant/clientList:
    post:
      operationId: 'App\Action\UserAccountantAction::clientListAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/accountant/inviteList:
    post:
      operationId: 'App\Action\UserAccountantAction::userAccountantInviteListAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/accountant/enquiry:
    post:
      operationId: 'App\Action\UserAccountantAction::enquiryAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/accountant/enquiryList:
    post:
      operationId: 'App\Action\UserAccountantAction::enquiryListAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/accountant/enquiryDetail:
    post:
      operationId: 'App\Action\UserAccountantAction::enquiryDetailAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/accountant/readMessage:
    post:
      operationId: 'App\Action\UserAccountantAction::readMessageAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/emailExist:
    post:
      operationId: 'App\Action\UserAccountantAction::emailExistAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/accountant/inviteAccountant:
    post:
      operationId: 'App\Action\UserAccountantAction::inviteAccountantAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /accountant-registration:
    post:
      operationId: 'App\Action\UserAccountantAction::registrationAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /accountant-mapping:
    post:
      operationId: 'App\Action\UserAccountantAction::mappingAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/accountant/userList:
    post:
      operationId: 'App\Action\UserAccountantAction::userListAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/accountant/deattach:
    post:
      operationId: 'App\Action\UserAccountantAction::deattachAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/accountant/billings:
    post:
      operationId: 'App\Action\UserAccountantAction::billingListAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/accountant/billingHistory:
    post:
      operationId: 'App\Action\UserAccountantAction::getUserAccountantSubscriptionsAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/accountant/paymentAcceptance:
    post:
      operationId: 'App\Action\UserAccountantAction::paymentAcceptanceAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/accountants:
    post:
      operationId: 'App\Action\UserAccountantAction::accountantsAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/accountant/tileDetail:
    post:
      operationId: 'App\Action\UserAccountantAction::tileDetailAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/accountant/enquiryCount:
    post:
      operationId: 'App\Action\UserAccountantAction::enquiryCountAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/accountant-unmapping:
    post:
      operationId: 'App\Action\UserAccountantAction::unmappingAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/accountant/cron/enquiryAlert:
    get:
      operationId: 'App\Action\UserAccountantAction::enquiryAlertAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/accountant/messageCountByStaff:
    post:
      operationId: 'App\Action\UserAccountantAction::messageCountByStaffAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/accountant/activityCountByStaff:
    post:
      operationId: 'App\Action\UserAccountantAction::activityCountByStaffAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/user/info:
    post:
      tags:
        - user
      description: 'Get a list of all users'
      operationId: 'App\Action\UserAction::fetchAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  '/1.0/user/info/{id}':
    post:
      tags:
        - user
      description: 'get a specific user'
      operationId: 'App\Action\UserAction::fetchOneAction'
      parameters:
        -
          name: id
          in: path
          description: 'user id'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /1.0/register:
    post:
      tags:
        - user
      description: 'register a new user'
      operationId: 'App\Action\UserAction::addUserAction'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              required:
                - firstname
                - lastname
              properties:
                firstname:
                  description: 'first name of new user'
                  type: string
                lastname:
                  description: 'last name of new user'
                  type: string
                email:
                  description: 'email of new user'
                  type: string
                password:
                  description: 'password of new user'
                  type: string
                role:
                  description: 'role id of new user'
                  type: integer
                is_invited:
                  description: ''
                  type: boolean
                status:
                  description: ''
                  type: integer
              type: object
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  code: { type: string }
                  data: { type: object }
                type: object
  /1.0/activate:
    post:
      tags:
        - user
      description: ''
      operationId: 'App\Action\UserAction::activateUserAction'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              required:
                - email
                - user_id
              properties:
                email:
                  description: 'email of the user'
                  type: string
                user_id:
                  description: 'id of the user'
                  type: integer
              type: object
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  code: { type: string }
                  data: { type: object }
                type: object
  /1.0/login:
    post:
      tags:
        - user
      description: ''
      operationId: 'App\Action\UserAction::loginUserAction'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              required:
                - email
                - is_accountant
              properties:
                email:
                  description: 'email of the user'
                  type: string
                is_accountant:
                  description: 'is the user logging in as an accountant'
                  type: integer
              type: object
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  code: { type: string }
                  user_id: { type: integer }
                  gtf_token: { type: string }
                  is_basic_info_set: { type: integer }
                  user_name: { type: string }
                  role: { type: integer }
                  uuid: { type: string }
                  imgUrl: { type: string }
                type: object
  /1.0/getJWT:
    post:
      tags:
        - user
      description: ''
      operationId: 'App\Action\UserAction::getJWTAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  code: { type: string }
                  message: { type: object }
                type: object
  /1.0/updatePassword:
    post:
      tags:
        - user
      description: 'This is related to /1.0/user/changePassword and /1.0/updatePassword APIs'' routes'
      operationId: 'App\Action\UserAction::updatePasswordAction'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              required:
                - email
                - password
              properties:
                email:
                  description: 'email of the user'
                  type: string
                password:
                  description: 'password of the user'
                  type: string
              type: object
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  code: { type: string }
                type: object
  /1.0/logincheck:
    post:
      tags:
        - user
      description: ''
      operationId: 'App\Action\UserAction::userLoginCheckAction'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              required:
                - email
                - is_accountant
              properties:
                email:
                  description: 'email of the user'
                  type: string
                is_accountant:
                  description: 'is the user logging in as an accountant'
                  type: integer
              type: object
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  code: { type: string }
                type: object
  /1.0/refresh/details:
    post:
      tags:
        - user
      description: ''
      operationId: 'App\Action\UserAction::refreshUserDetailsAction'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              required:
                - user_id
              properties:
                user_id:
                  description: 'id of the user'
                  type: integer
              type: object
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  code: { type: string }
                  message: { type: object }
                type: object
  /1.0/2fa/update:
    post:
      tags:
        - user
        - mfa
      description: ''
      operationId: 'App\Action\UserAction::update2faAction'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              required:
                - user_id
                - secret
              properties:
                user_id:
                  description: 'id of the user'
                  type: integer
                secret:
                  description: ''
                  type: string
                otp:
                  description: ''
                  type: integer
              type: object
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: integer }
                  message: { type: string }
                type: object
  '/1.0/user/2fa/{user_id}':
    get:
      tags:
        - user
        - mfa
      description: ''
      operationId: 'App\Action\UserAction::fetch2faAction'
      parameters:
        -
          name: user_id
          in: path
          description: 'user id'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  secret: { type: string }
                  google2fa_url: { type: string }
                type: object
  /1.0/2fa/verify:
    post:
      tags:
        - user
        - mfa
      description: ''
      operationId: 'App\Action\UserAction::verify2faAction'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              required:
                - user_id
                - otp
              properties:
                user_id:
                  description: 'id of the user'
                  type: integer
                otp:
                  description: ''
                  type: integer
              type: object
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: integer }
                  message: { type: string }
                type: object
  '/1.0/2fa/disable/{user_id}':
    post:
      tags:
        - user
        - mfa
      description: ''
      operationId: 'App\Action\UserAction::disable2faAction'
      parameters:
        -
          name: user_id
          in: path
          description: 'user id'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  message: { type: string }
                type: object
  /1.0/user/profileUpload:
    post:
      tags:
        - user
        - profile
      description: ''
      operationId: 'App\Action\UserAction::profileUploadAction'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              required:
                - user_id
              properties:
                user_id:
                  description: 'id of the user'
                  type: integer
              type: object
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: integer }
                  message: { type: object }
                type: object
  /1.0/user/profileUpdate:
    post:
      tags:
        - user
        - profile
      description: ''
      operationId: 'App\Action\UserAction::profileUpdateAction'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              required:
                - user_id
              properties:
                user_id:
                  description: 'id of the user'
                  type: integer
                firstname:
                  description: 'First name of the individual'
                  type: string
                lastname:
                  description: 'Last name of the individual'
                  type: string
                contact_name:
                  description: 'Contact name of the individual account which is not always the users name'
                  type: integer
                state:
                  description: 'Address state or province of the address given'
                  type: string
                email:
                  description: 'A valid email address'
                  type: string
                dob:
                  description: 'Date of birth of user. DD/MM/YYYY 19/10/78'
                  type: string
                tfn:
                  description: 'ATO provided Tax file number'
                  type: integer
                phone_number:
                  description: 'Mobile or home phone number'
                  type: string
                mobile:
                  description: 'Cell phone number'
                  type: string
                pincode:
                  description: 'Postal code/ZIP code of the users address on file'
                  type: integer
                suburb:
                  description: 'City or Suburb of the address provided'
                  type: string
                address:
                  description: 'Street address'
                  type: string
                country:
                  description: 'Country of address given'
                  type: string
              type: object
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: integer }
                  message: { type: object }
                type: object
  /1.0/user/fetchProfile:
    post:
      tags:
        - user
        - profile
      description: ''
      operationId: 'App\Action\UserAction::fetchProfileAction'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              required:
                - user_id
              properties:
                user_id:
                  description: 'id of the user'
                  type: integer
              type: object
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  code: { type: string }
                  message: { type: object }
                type: object
  /1.0/user/cardDetailsUpdate:
    post:
      tags:
        - user
        - card
      description: ''
      operationId: 'App\Action\UserAction::cardDetailsUpdateAction'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              required:
                - user_id
                - card_holder
                - stripe_token
              properties:
                user_id:
                  description: 'id of the user'
                  type: integer
                card_holder:
                  description: 'name on credit card'
                  type: integer
                stripe_token:
                  description: 'stripe token'
                  type: integer
              type: object
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  code: { type: string }
                  message: { type: object }
                type: object
  /1.0/user/cardDetailsFetch:
    post:
      tags:
        - user
        - card
      description: ''
      operationId: 'App\Action\UserAction::cardDetailsFetchAction'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              required:
                - user_id
              properties:
                user_id:
                  description: 'id of the user'
                  type: integer
              type: object
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  code: { type: string }
                  message: { type: object }
                type: object
  /1.0/mfa/questions:
    post:
      tags:
        - user
        - mfa
      description: 'Get a list of possible mfa questions'
      operationId: 'App\Action\UserAction::getMFAQuestionsAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  code: { type: string }
                  message: { type: string }
                  data: { type: object }
                type: object
  /1.0/user/mfa/get/questions:
    post:
      tags:
        - user
        - mfa
      description: ''
      operationId: 'App\Action\UserAction::getUserMFAQuestionsAction'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              required:
                - user_id
              properties:
                user_id:
                  description: 'id of the user'
                  type: integer
              type: object
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  message: { type: string }
                  data: { type: object }
                  code: { type: integer }
                type: object
  /1.0/user/mfa/verify/questions:
    post:
      tags:
        - user
        - mfa
      description: ''
      operationId: 'App\Action\UserAction::MFAQuestionsVerifyAction'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              required:
                - user_id
                - question_id
                - answer
              properties:
                user_id:
                  description: 'id of the user'
                  type: integer
                question_id:
                  description: 'id of the question'
                  type: integer
                answer:
                  description: 'users answer to the question'
                  type: string
              type: object
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  message: { type: string }
                  code: { type: integer }
                type: object
  /1.0/user/mfa/add/questions:
    post:
      tags:
        - user
        - mfa
      description: ''
      operationId: 'App\Action\UserAction::MFAQuestionsAction'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              required:
                - user_id
                - question
              properties:
                user_id:
                  description: 'id of the user'
                  type: integer
                question:
                  description: 'list of questions'
                  type: array
                  items: { $ref: '#/components/schemas/MFAQuestionAnswers' }
              type: object
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  message: { type: string }
                  code: { type: integer }
                type: object
  /1.0/user/forgotPassword:
    post:
      tags:
        - user
      description: ''
      operationId: 'App\Action\UserAction::forgotPasswordAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  code: { type: string }
                type: object
  /PLACEHOLDER-testAction:
    post:
      operationId: 'App\Action\UserAction::testAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  code: { type: string }
                type: object
  /PLACEHOLDER-/1.0/sendmail/:
    post:
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /1.0/sendmail/:
    post:
      operationId: 'App\Action\UserAction::sendEmailAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /PLACEHOLDER-userInfoAction:
    post:
      operationId: 'App\Action\UserAction::userInfoAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /PLACEHOLDER-adminUsersListAction:
    post:
      operationId: 'App\Action\UserAction::adminUsersListAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /PLACEHOLDER-deleteAdminUserAction:
    post:
      summary: 'This method does not appears to have any implementation'
      description: 'This method does not appears to have any implementation'
      operationId: 'App\Action\UserAction::deleteAdminUserAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /PLACEHOLDER-updateUserAction:
    post:
      operationId: 'App\Action\UserAction::updateUserAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /PLACEHOLDER-fileUploadAction:
    post:
      operationId: 'App\Action\UserAction::fileUploadAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /PLACEHOLDER-deleteUserAction:
    post:
      operationId: 'App\Action\UserAction::deleteUserAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /PLACEHOLDER-userRefreshDetailsAction:
    post:
      operationId: 'App\Action\UserAction::userRefreshDetailsAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  code: { type: string }
                  details: { type: object }
                type: object
  /1.0/user/lockout:
    post:
      tags:
        - user
      description: ''
      operationId: 'App\Action\UserAction::lockOutAction'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  message: { type: string }
                  code: { type: integer }
                type: object
  /1.0/user/subscription/addEditSubscription:
    post:
      description: ''
      operationId: 'App\Action\UserSubscriptionAction::addEditSubscriptionAction'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subscription'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  code: { type: string }
                  message: { type: string }
                type: object
  /1.0/user/subscription/removeSubscription:
    post:
      description: ''
      operationId: 'App\Action\UserSubscriptionAction::removeSubscriptionAction'
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                id:
                  description: 'id of the subscription'
                  type: integer
              type: object
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  code: { type: string }
                  message: { type: string }
                type: object
  /1.0/user/subscription/addEditUserSubscription:
    post:
      description: ''
      operationId: 'App\Action\UserSubscriptionAction::addEditUserSubscriptionAction'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              required:
                - user_id
                - subscription_id
                - start_date
              properties:
                user_id:
                  description: 'id of the user'
                  type: integer
                subscription_id:
                  description: 'id of the subscription'
                  type: integer
                start_date:
                  description: 'start date of the subscription'
                  type: string
                property_quantity:
                  description: 'number of properties included in the subscription'
                  type: integer
                payment_id:
                  description: 'id of the payment'
                  type: integer
              type: object
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  code: { type: string }
                  message: { type: string }
                type: object
  /1.0/subscription/cronSubscription:
    post:
      description: ''
      operationId: 'App\Action\UserSubscriptionAction::cronSubscriptionAction'
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                user_id:
                  description: 'id of the user'
                  type: string
                financial_year:
                  description: 'id of the user'
                  type: string
              type: object
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  code: { type: string }
                  message: { type: string }
                type: object
  /1.0/user/subscription/getSubscriptions:
    post:
      description: ''
      operationId: 'App\Action\UserSubscriptionAction::getUserSubscriptionsAction'
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                user_id:
                  description: 'id of the user'
                  type: string
                financial_year:
                  description: 'id of the user'
                  type: string
              type: object
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  code: { type: string }
                  data: { type: object }
                type: object
  /1.0/user/subscription/paymentInitiate:
    post:
      description: ''
      operationId: 'App\Action\UserSubscriptionAction::paymentInitiateAction'
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                user_id:
                  description: 'id of the user'
                  type: string
                financial_year:
                  description: 'id of the user'
                  type: string
              type: object
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  code: { type: string }
                  message: { type: string }
                type: object
  /1.0/user/subscription/paymentStatusUpdate:
    post:
      description: ''
      operationId: 'App\Action\UserSubscriptionAction::paymentStatusUpdateAction'
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                user_id:
                  description: 'id of the user'
                  type: string
                financial_year:
                  description: 'id of the user'
                  type: string
              type: object
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  code: { type: string }
                  message: { type: string }
                type: object
  /1.0/user/subscription/processPayment:
    post:
      description: ''
      operationId: 'App\Action\UserSubscriptionAction::processPaymentAction'
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                user_id:
                  description: 'id of the user'
                  type: string
                financial_year:
                  description: 'id of the user'
                  type: string
              type: object
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  code: { type: string }
                  message: { type: string }
                type: object
  /1.0/user/subscription/paymentSummary:
    post:
      description: ''
      operationId: 'App\Action\UserSubscriptionAction::paymentSummaryAction'
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                user_id:
                  description: 'id of the user'
                  type: string
                financial_year:
                  description: 'id of the user'
                  type: string
              type: object
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  code: { type: string }
                  message: { type: string }
                type: object
  /1.0/user/subscription/subscriptionCancel:
    post:
      description: ''
      operationId: 'App\Action\UserSubscriptionAction::subscriptionCancelAction'
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                user_id:
                  description: 'id of the user'
                  type: string
                financial_year:
                  description: 'id of the user'
                  type: string
              type: object
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  code: { type: string }
                  message: { type: string }
                type: object
  /1.0/user/subscription/getInvoiceData:
    post:
      description: ''
      operationId: 'App\Action\UserSubscriptionAction::getInvoiceDataAction'
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                user_id:
                  description: 'id of the user'
                  type: string
                financial_year:
                  description: 'id of the user'
                  type: string
              type: object
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  code: { type: string }
                  data: { type: object }
                type: object
  /1.0/user/subscription/downloadInvoice:
    post:
      description: ''
      operationId: 'App\Action\UserSubscriptionAction::downloadInvoiceAction'
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                user_id:
                  description: 'id of the user'
                  type: string
                financial_year:
                  description: 'id of the user'
                  type: string
              type: object
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  code: { type: string }
                  data: { type: object }
                type: object
  /1.0/user/summary:
    post:
      description: ''
      operationId: 'App\Action\UserSummaryAction::calculationsAction'
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                user_id:
                  description: 'id of the user'
                  type: string
                financial_year:
                  description: 'id of the user'
                  type: string
              type: object
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  data: { type: string }
                type: object
  /1.0/user/summary/report:
    post:
      description: ''
      operationId: 'App\Action\UserSummaryAction::reportAction'
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                user_id:
                  description: 'id of the user'
                  type: string
                financial_year:
                  description: 'id of the user'
                  type: string
              type: object
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  data: { type: string }
                type: object
  /1.0/user/summary/toggle:
    post:
      description: ''
      operationId: 'App\Action\UserSummaryAction::toggleAction'
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                user_id:
                  description: 'id of the user'
                  type: string
                financial_year:
                  description: 'id of the user'
                  type: string
              type: object
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  data: { type: string }
                type: object
  /1.0/user/summary/export:
    post:
      description: ''
      operationId: 'App\Action\UserSummaryAction::exportAction'
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                user_id:
                  description: 'id of the user'
                  type: string
                financial_year:
                  description: 'id of the user'
                  type: string
              type: object
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  data: { type: string }
                type: object
  /1.0/user/summary/forecast:
    post:
      description: ''
      operationId: 'App\Action\UserSummaryAction::taxSummaryForecastAction'
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                user_id:
                  description: 'id of the user'
                  type: string
                financial_year:
                  description: 'id of the user'
                  type: string
              type: object
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  data: { type: string }
                type: object
  /1.0/user/summary/actuals:
    post:
      description: ''
      operationId: 'App\Action\UserSummaryAction::taxSummaryActualsAction'
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                user_id:
                  description: 'id of the user'
                  type: string
                financial_year:
                  description: 'id of the user'
                  type: string
              type: object
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  data: { type: string }
                type: object
  /1.0/user/worktank/getLoans:
    post:
      description: 'Gets all loans for a specific user'
      operationId: 'App\Action\WorktankAction::getLoansAction'
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                user_id:
                  description: 'id of the user'
                  type: string
              type: object
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  data: { type: string }
                type: object
  /1.0/user/worktank/addLoan:
    post:
      description: 'Adds a loan for a user'
      operationId: 'App\Action\WorktankAction::addLoanAction'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              properties:
                user_id:
                  description: 'id of the user'
                  type: integer
                loan_id:
                  description: 'id of the loan'
                  type: integer
                loan_description:
                  description: ''
                  type: string
                loan_bank_name:
                  description: ''
                  type: string
                loan_account_number:
                  description: ''
                  type: string
                loan_amount:
                  description: ''
                  type: integer
                loan_type:
                  description: ''
                  type: integer
                interest_rate:
                  description: ''
                  type: number
                interest_percentage:
                  description: ''
                  type: number
                term:
                  description: ''
                  type: integer
                account_id:
                  description: ''
                  type: integer
                commencement_date:
                  description: ''
                  type: string
                balance_date:
                  description: ''
                  type: string
                repayment_amount:
                  description: ''
                  type: number
                repayment_frequency:
                  description: ''
                  type: string
              type: object
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  data: { type: string }
                type: object
  /1.0/user/worktank/updateLoan:
    post:
      description: 'Updates an existing loan'
      operationId: 'App\Action\WorktankAction::updateLoanAction'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              properties:
                user_id:
                  description: 'id of the user'
                  type: integer
                loan_id:
                  description: 'id of the loan'
                  type: integer
                loan_description:
                  description: ''
                  type: string
                loan_bank_name:
                  description: ''
                  type: string
                loan_account_number:
                  description: ''
                  type: string
                loan_amount:
                  description: ''
                  type: integer
                loan_type:
                  description: ''
                  type: integer
                interest_rate:
                  description: ''
                  type: number
                interest_percentage:
                  description: ''
                  type: number
                term:
                  description: ''
                  type: integer
                account_id:
                  description: ''
                  type: integer
                commencement_date:
                  description: ''
                  type: string
                balance_date:
                  description: ''
                  type: string
                repayment_amount:
                  description: ''
                  type: number
                repayment_frequency:
                  description: ''
                  type: string
              type: object
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  status: { type: string }
                  data: { type: string }
                type: object
components:
  schemas:
    AccountSetup:
      properties:
        id:
          type: integer
          nullable: false
        module:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        button_text:
          type: string
          nullable: true
        score:
          type: integer
          nullable: true
        sort_order:
          type: integer
          nullable: true
        status:
          type: integer
          nullable: true
        created_on:
          type: string
          format: date-time
          nullable: true
      type: object
    BankAccountForecasting:
      properties:
        bank_forecasting_id:
          type: integer
          nullable: false
        bank_account_id:
          type: integer
          nullable: true
        financial_year:
          type: integer
          nullable: true
        opening_balance:
          type: string
          nullable: false
        closing_balance:
          type: string
          nullable: false
        is_deleted:
          type: integer
          nullable: true
        created_on:
          type: string
          format: date-time
          nullable: false
        created_by:
          type: integer
          nullable: false
        updated_on:
          type: string
          format: date-time
          nullable: false
        updated_by:
          type: integer
          nullable: false
      type: object
    BankAccountProperty:
      properties:
        bank_property_id:
          type: integer
          nullable: false
        account_id:
          type: string
          nullable: false
        property_id:
          type: integer
          nullable: true
        created_on:
          type: string
          format: date-time
          nullable: false
        created_by:
          type: integer
          nullable: false
        updated_on:
          type: string
          format: date-time
          nullable: false
        updated_by:
          type: integer
          nullable: false
      type: object
    BankAccounts:
      properties:
        bank_account_id:
          type: integer
          nullable: false
        user_id:
          type: integer
          nullable: false
        yodlee_id:
          type: integer
          nullable: true
        yodlee_ref_id:
          type: integer
          nullable: true
        account_id:
          type: string
          nullable: false
        account_type:
          type: string
          nullable: false
        account_name:
          type: string
          nullable: false
        nickname:
          type: string
          nullable: true
        account_number:
          type: string
          nullable: false
        balance_amount:
          type: string
          nullable: false
        closing_balance:
          type: string
          nullable: true
        user_provider_id:
          type: integer
          nullable: true
        bank_name:
          type: string
          nullable: false
        assign_property:
          type: integer
          nullable: true
        currency:
          type: string
          nullable: false
        include_in_net_worth:
          type: string
          nullable: false
        memo:
          type: string
          nullable: false
        status:
          type: integer
          nullable: false
        is_manual:
          type: integer
          nullable: true
        transaction_type:
          type: integer
          nullable: true
        from_date:
          type: string
          format: date-time
          nullable: true
        created_on:
          type: string
          format: date-time
          nullable: false
        is_deleted:
          type: integer
          nullable: true
      type: object
    BankTransfer:
      properties:
        transfer_id:
          type: integer
          nullable: false
        user_id:
          type: integer
          nullable: false
        source:
          type: integer
          nullable: true
        destination:
          type: integer
          nullable: true
        bank_account_id:
          type: integer
          nullable: true
        property_id:
          type: integer
          nullable: true
        created_on:
          type: string
          format: date-time
          nullable: false
        updated_on:
          type: string
          format: date-time
          nullable: true
      type: object
    BankfeedImport:
      properties:
        id:
          type: integer
          nullable: false
        uuid:
          type: string
          nullable: false
        user_id:
          type: integer
          nullable: true
        account_id:
          type: integer
          nullable: false
        is_deleted:
          type: integer
          nullable: false
        created_on:
          type: string
          format: date-time
          nullable: false
        updated_on:
          type: string
          format: date-time
          nullable: true
      type: object
    BankfeedTransaction:
      properties:
        bankfeed_id:
          type: integer
          nullable: false
        user_id:
          type: integer
          nullable: true
        bank_account_id:
          type: integer
          nullable: true
        bankfeed_import_id:
          type: integer
          nullable: true
        is_manual_upload:
          type: integer
          nullable: true
        txn_id:
          type: string
          nullable: false
        txn_base_type:
          type: string
          nullable: false
        txn_category_type:
          type: string
          nullable: true
        txn_amount:
          type: number
          nullable: false
        txn_currency:
          type: string
          nullable: false
        txn_date:
          type: string
          format: date-time
          nullable: true
        txn_merchant:
          type: string
          nullable: true
        txn_description:
          type: string
          nullable: false
        account_id:
          type: integer
          nullable: false
        is_split_transaction:
          type: integer
          nullable: true
        status:
          type: string
          nullable: false
        is_categorized:
          type: integer
          nullable: false
        transfer_account_id:
          type: integer
          nullable: true
        is_private:
          type: integer
          nullable: false
        created_on:
          type: string
          format: date-time
          nullable: false
        updated_on:
          type: string
          format: date-time
          nullable: true
        is_transfer:
          type: integer
          nullable: true
        transfer_type:
          type: integer
          nullable: true
      type: object
    BankfeedUserTransMapping:
      properties:
        id:
          type: integer
          nullable: false
        trans_type:
          type: integer
          nullable: true
        bankfeed_id:
          type: integer
          nullable: false
        trans_id:
          type: integer
          nullable: true
      type: object
    BorrowingExpense:
      properties:
        id:
          type: integer
          nullable: false
        name:
          type: string
          nullable: false
        is_deleted:
          type: integer
          nullable: false
        status:
          type: integer
          nullable: false
        amortizable:
          type: integer
          nullable: false
        created_on:
          type: string
          format: date-time
          nullable: false
        updated_on:
          type: string
          format: date-time
          nullable: true
        created_by:
          type: integer
          nullable: false
        updated_by:
          type: integer
          nullable: true
      type: object
    BorrowingExpenseSplitup:
      properties:
        id:
          type: integer
          nullable: false
        loan_id:
          type: integer
          nullable: true
        borrowing_expense_id:
          type: integer
          nullable: true
        amount:
          type: number
          nullable: true
        created_on:
          type: string
          format: date-time
          nullable: false
        updated_on:
          type: string
          format: date-time
          nullable: true
        created_by:
          type: integer
          nullable: false
        updated_by:
          type: integer
          nullable: true
      type: object
    Calculation:
      properties:
        id:
          type: integer
          nullable: false
        calculation_type:
          type: integer
          nullable: false
        tax_year:
          type: integer
          nullable: false
        x:
          type: number
          nullable: false
        a:
          type: number
          nullable: false
        b:
          type: number
          nullable: false
        is_australian_resident:
          type: integer
          nullable: true
        tax_free_threshold_claimed:
          type: integer
          nullable: true
        medicare_exemption:
          type: string
          nullable: false
        under_preservation_age:
          type: integer
          nullable: true
      type: object
    CapitalCost:
      properties:
        id:
          type: integer
          nullable: false
        name:
          type: string
          nullable: false
        is_deleted:
          type: integer
          nullable: false
        status:
          type: integer
          nullable: false
        created_on:
          type: string
          format: date-time
          nullable: false
        updated_on:
          type: string
          format: date-time
          nullable: true
        created_by:
          type: integer
          nullable: false
        updated_by:
          type: integer
          nullable: true
      type: object
    CapitalCostSplitup:
      properties:
        id:
          type: integer
          nullable: false
        property_id:
          type: integer
          nullable: true
        capital_cost_id:
          type: integer
          nullable: true
        amount:
          type: number
          nullable: true
        created_on:
          type: string
          format: date-time
          nullable: false
        updated_on:
          type: string
          format: date-time
          nullable: true
        created_by:
          type: integer
          nullable: false
        updated_by:
          type: integer
          nullable: true
      type: object
    ChartAccounts:
      properties:
        id:
          type: integer
          nullable: false
        name:
          type: string
          nullable: false
        chart_accounts_type_id:
          type: integer
          nullable: false
        show_in_basic_setup:
          type: integer
          nullable: true
        parent_id:
          type: integer
          nullable: false
        is_deleted:
          type: integer
          nullable: false
        status:
          type: integer
          nullable: false
        created_on:
          type: string
          format: date-time
          nullable: false
        updated_on:
          type: string
          format: date-time
          nullable: true
        created_by:
          type: integer
          nullable: false
        updated_by:
          type: integer
          nullable: true
        summary_header_id:
          type: integer
          nullable: true
        description_label:
          type: string
          nullable: true
        abn_label:
          type: string
          nullable: true
        gross_label:
          type: string
          nullable: true
        income_label:
          type: string
          nullable: true
        withheld_label:
          type: string
          nullable: true
        offset_label:
          type: string
          nullable: true
        cgt_label:
          type: string
          nullable: true
        share_percent:
          type: integer
          nullable: true
        question_label:
          type: string
          nullable: true
        tax_item:
          type: string
          nullable: true
        tax_item_code:
          type: string
          nullable: true
        tax_item_id:
          type: integer
          nullable: true
      type: object
    ChartAccountsDepreciation:
      properties:
        id:
          type: integer
          nullable: false
        chart_accounts_id:
          type: integer
          nullable: true
        effective_year:
          type: string
          nullable: true
        life_time:
          type: integer
          nullable: true
        created_on:
          type: string
          format: date-time
          nullable: true
        created_by:
          type: integer
          nullable: true
        updated_on:
          type: string
          format: date-time
          nullable: true
        updated_by:
          type: integer
          nullable: true
      type: object
    ChartAccountsGroup:
      properties:
        id:
          type: integer
          nullable: false
        name:
          type: string
          nullable: false
        is_deleted:
          type: integer
          nullable: false
        status:
          type: integer
          nullable: false
        created_on:
          type: string
          format: date-time
          nullable: false
        updated_on:
          type: string
          format: date-time
          nullable: true
        created_by:
          type: integer
          nullable: false
        updated_by:
          type: integer
          nullable: true
      type: object
    ChartAccountsType:
      properties:
        id:
          type: integer
          nullable: false
        name:
          type: string
          nullable: false
        chart_accounts_group_id:
          type: integer
          nullable: false
        module_type:
          type: integer
          nullable: false
        tank_type:
          type: integer
          nullable: true
        sub_types:
          type: integer
          nullable: true
        is_deleted:
          type: integer
          nullable: false
        status:
          type: integer
          nullable: false
        created_on:
          type: string
          format: date-time
          nullable: false
        updated_on:
          type: string
          format: date-time
          nullable: true
        created_by:
          type: integer
          nullable: false
        updated_by:
          type: integer
          nullable: true
      type: object
    CreditCardDetails:
      properties:
        id:
          type: integer
          nullable: false
        user_id:
          type: integer
          nullable: false
        card_holder_name:
          type: string
          nullable: false
        card_number:
          type: string
          nullable: false
        expire_date:
          type: integer
          nullable: false
        expire_month:
          type: integer
          nullable: false
        token:
          type: string
          nullable: true
        response_string:
          type: string
          nullable: true
        status:
          type: integer
          nullable: false
        created_on:
          type: string
          format: date-time
          nullable: false
        created_by:
          type: integer
          nullable: false
        updated_on:
          type: string
          format: date-time
          nullable: false
        updated_by:
          type: integer
          nullable: false
      type: object
    CreditCardDetailsHistory:
      properties:
        id:
          type: integer
          nullable: false
        user_id:
          type: integer
          nullable: false
        credit_card_details_id:
          type: integer
          nullable: true
        card_holder_name:
          type: string
          nullable: false
        card_number:
          type: string
          nullable: false
        expire_date:
          type: integer
          nullable: false
        expire_month:
          type: integer
          nullable: false
        token:
          type: string
          nullable: true
        response_string:
          type: string
          nullable: true
        status:
          type: integer
          nullable: false
        created_on:
          type: string
          format: date-time
          nullable: false
        created_by:
          type: integer
          nullable: false
      type: object
    Depreciation:
      properties:
        depreciation_id:
          type: integer
          nullable: false
        user_id:
          type: integer
          nullable: true
        property_id:
          type: integer
          nullable: true
        bankfeed_id:
          type: integer
          nullable: true
        purchase_date:
          type: string
          format: date-time
          nullable: true
        amount:
          type: number
          nullable: true
        item_description:
          type: string
          nullable: true
        depreciation_mode:
          type: integer
          nullable: true
        capital_work_category_id:
          type: integer
          nullable: true
        chart_accounts_id:
          type: integer
          nullable: true
        dep_type:
          type: integer
          nullable: true
        useful_life:
          type: integer
          nullable: true
        dep_percentage:
          type: number
          nullable: true
        personal_percentage:
          type: number
          nullable: true
        is_manual_cal_set:
          type: integer
          nullable: true
        is_consolidated_entry:
          type: integer
          nullable: true
        is_write_off:
          type: integer
          nullable: true
        is_replace:
          type: integer
          nullable: true
        created_on:
          type: string
          format: date-time
          nullable: false
        created_by:
          type: integer
          nullable: false
        updated_on:
          type: string
          format: date-time
          nullable: false
        updated_by:
          type: integer
          nullable: false
        is_lvp:
          type: integer
          nullable: true
        tank_type:
          type: integer
          nullable: true
        loan_id:
          type: integer
          nullable: true
      type: object
    DepreciationCapitalCategory:
      properties:
        capital_category_id:
          type: integer
          nullable: false
        user_id:
          type: integer
          nullable: true
        property_id:
          type: integer
          nullable: true
        capital_category_name:
          type: string
          nullable: true
        is_deleted:
          type: integer
          nullable: true
        effective_date:
          type: string
          format: date-time
          nullable: false
        created_on:
          type: string
          format: date-time
          nullable: true
        created_by:
          type: integer
          nullable: true
        updated_on:
          type: string
          format: date-time
          nullable: true
        updated_by:
          type: integer
          nullable: true
      type: object
    DepreciationSplitup:
      properties:
        dep_split_id:
          type: integer
          nullable: false
        depreciation_id:
          type: integer
          nullable: true
        from_date:
          type: string
          format: date-time
          nullable: true
        to_date:
          type: string
          format: date-time
          nullable: true
        no_of_days:
          type: integer
          nullable: true
        financial_year:
          type: integer
          nullable: true
        open_balance:
          type: number
          nullable: true
        close_balance:
          type: number
          nullable: true
        dep_amount:
          type: number
          nullable: true
        bankfeed_id:
          type: integer
          nullable: true
        is_write_off:
          type: integer
          nullable: true
        created_on:
          type: string
          format: date-time
          nullable: true
        created_by:
          type: integer
          nullable: true
        updated_on:
          type: string
          format: date-time
          nullable: true
        updated_by:
          type: integer
          nullable: true
      type: object
    DepreciationWriteofReplace:
      properties:
        id:
          type: integer
          nullable: false
        depreciation_id:
          type: integer
          nullable: true
        mode:
          type: integer
          nullable: true
        trans_date:
          type: string
          format: date-time
          nullable: true
        replace_depreciation_id:
          type: integer
          nullable: true
        created_on:
          type: string
          format: date-time
          nullable: true
        created_by:
          type: integer
          nullable: true
        updated_on:
          type: string
          format: date-time
          nullable: true
        updated_by:
          type: integer
          nullable: true
      type: object
    EmailSettings:
      properties:
        id:
          type: integer
          nullable: false
        from_name:
          type: string
          nullable: true
        from_email:
          type: string
          nullable: true
        admin_email:
          type: string
          nullable: true
      type: object
    EmailTemplate:
      properties:
        id:
          type: integer
          nullable: false
        email_slug:
          type: string
          nullable: true
        to_email:
          type: string
          nullable: true
        cc_email:
          type: string
          nullable: true
        bcc_email:
          type: string
          nullable: true
        subject:
          type: string
          nullable: true
        message:
          type: string
          nullable: true
        status:
          type: integer
          nullable: false
        created_on:
          type: string
          format: date-time
          nullable: false
        updated_on:
          type: string
          format: date-time
          nullable: true
        created_by:
          type: integer
          nullable: true
        updated_by:
          type: integer
          nullable: true
      type: object
    Employer:
      properties:
        id:
          type: integer
          nullable: false
        user_id:
          type: integer
          nullable: true
        employer:
          type: string
          nullable: true
        status:
          type: integer
          nullable: true
        created_on:
          type: string
          format: date-time
          nullable: false
        updated_on:
          type: string
          format: date-time
          nullable: true
        created_by:
          type: integer
          nullable: true
        updated_by:
          type: integer
          nullable: true
      type: object
    EmployerForecastingDetails:
      properties:
        id:
          type: integer
          nullable: false
        employer_id:
          type: integer
          nullable: true
        financial_year:
          type: integer
          nullable: true
        user_id:
          type: integer
          nullable: true
        payg_income:
          type: number
          nullable: true
        frequency:
          type: integer
          nullable: true
        net_pay:
          type: number
          nullable: true
        tax_amount:
          type: number
          nullable: true
        medicare_levy:
          type: number
          nullable: true
        tax_offset_low:
          type: number
          nullable: true
        tax_offset_middle:
          type: number
          nullable: true
        is_tax_free:
          type: integer
          nullable: true
        created_on:
          type: string
          format: date-time
          nullable: false
        updated_on:
          type: string
          format: date-time
          nullable: true
        created_by:
          type: integer
          nullable: true
        updated_by:
          type: integer
          nullable: true
      type: object
    Enquiry:
      properties:
        enquiry_id:
          description: 'ID of the notification in the enquire table'
          type: integer
          nullable: false
        creator_id:
          description: 'User id of who is sending the notification. INTEGER'
          type: integer
          nullable: true
        recipient_id:
          description: 'User id of who is receiving the notification'
          type: integer
          nullable: true
        action_id:
          description: 'This is the suggested "related_id". Its can be any id related to the module like module/{id} aka property_action/75'
          type: integer
          nullable: true
        type:
          description: 'It can be of types ''notification'', ''system'' or''cron''. If not mentioned it means was a notification of type enquiry (default type)'
          type: string
          nullable: true
        subject:
          description: 'Title of the message'
          type: string
          nullable: true
        message:
          description: 'Message to be stored in notification'
          type: string
          nullable: true
        module:
          description: 'This is the suggested "type". Name of the module to which this notification is related to'
          type: string
          nullable: true
        created_on:
          type: string
          format: date-time
          nullable: true
        created_by:
          type: integer
          nullable: true
        updated_on:
          type: string
          format: date-time
          nullable: true
        updated_by:
          type: integer
          nullable: true
        deleted_by:
          type: integer
          nullable: true
      type: object
    EnquiryNotification:
      properties:
        id:
          type: integer
          nullable: false
        enquiry_id:
          type: integer
          nullable: true
        recipient_id:
          type: integer
          nullable: true
        is_read:
          type: integer
          nullable: true
        notify:
          type: integer
          nullable: true
      type: object
    Firm:
      properties:
        id:
          type: integer
          nullable: false
        uuid:
          type: string
          nullable: false
        name:
          type: string
          nullable: false
        email:
          type: string
          nullable: false
        phone_number:
          type: integer
          nullable: true
        profile_photo:
          type: string
          nullable: true
        address:
          type: string
          nullable: true
        city:
          type: string
          nullable: true
        state:
          type: string
          nullable: true
        pincode:
          type: integer
          nullable: true
        country:
          type: string
          nullable: true
        country_code:
          type: string
          nullable: true
        is_deleted:
          type: integer
          nullable: false
        status:
          type: integer
          nullable: false
        created_on:
          type: string
          format: date-time
          nullable: false
        updated_on:
          type: string
          format: date-time
          nullable: true
        created_by:
          type: integer
          nullable: true
        updated_by:
          type: integer
          nullable: true
      type: object
    FirmAccountantMapping:
      properties:
        id:
          type: integer
          nullable: false
        user_id:
          type: integer
          nullable: true
        firm_id:
          type: integer
          nullable: true
        role:
          type: integer
          nullable: false
        status:
          type: integer
          nullable: false
        is_deleted:
          type: integer
          nullable: false
        created_on:
          type: string
          format: date-time
          nullable: false
        created_by:
          type: integer
          nullable: true
        updated_on:
          type: string
          format: date-time
          nullable: true
        updated_by:
          type: integer
          nullable: true
      type: object
    ForecastingIncomeDetails:
      properties:
        id:
          type: integer
          nullable: false
        user_id:
          type: integer
          nullable: false
        financial_year:
          type: integer
          nullable: true
        payg_income:
          type: number
          nullable: true
        payg_super_income:
          type: integer
          nullable: true
        rental_income:
          type: number
          nullable: true
        dividend_income:
          type: number
          nullable: true
        trust_income:
          type: number
          nullable: true
        bonus:
          type: number
          nullable: true
        sole_trader:
          type: number
          nullable: true
        others:
          type: number
          nullable: true
        hecs_balance:
          type: number
          nullable: true
        help_balance:
          type: number
          nullable: true
        pels_balance:
          type: number
          nullable: true
        ssl_balance:
          type: number
          nullable: true
        tsl_balance:
          type: number
          nullable: true
        sfss_balance:
          type: number
          nullable: true
        expense:
          type: number
          nullable: true
        created_on:
          type: string
          format: date-time
          nullable: true
        updated_on:
          type: string
          format: date-time
          nullable: true
        created_by:
          type: integer
          nullable: true
        updated_by:
          type: integer
          nullable: true
      type: object
    IncomeFeeTransaction:
      properties:
        id:
          type: integer
          nullable: false
        trans_id:
          type: integer
          nullable: true
        chart_accounts_id:
          type: integer
          nullable: true
        fee_amount:
          type: number
          nullable: true
        fee_exp_claim_percentage:
          type: number
          nullable: true
        created_on:
          type: string
          format: date-time
          nullable: true
        created_by:
          type: integer
          nullable: true
        updated_on:
          type: string
          format: date-time
          nullable: true
        updated_by:
          type: integer
          nullable: true
      type: object
    Invite:
      properties:
        invite_id:
          type: integer
          nullable: false
        module:
          type: integer
          nullable: true
        from_user_id:
          type: integer
          nullable: true
        to_user_id:
          type: integer
          nullable: true
        to_name:
          type: string
          nullable: true
        to_user_email:
          type: string
          nullable: true
        accept_status:
          type: string
          nullable: true
        invite_desc:
          type: string
          nullable: true
        accept_reject_desc:
          type: string
          nullable: true
        share_percentage:
          type: number
          nullable: true
        created_on:
          type: string
          format: date-time
          nullable: true
        created_by:
          type: integer
          nullable: true
        updated_on:
          type: string
          format: date-time
          nullable: true
        updated_by:
          type: integer
          nullable: true
        property_id:
          type: integer
          nullable: true
        is_edit:
          type: integer
          nullable: true
        firm_id:
          type: integer
          nullable: true
        role:
          type: integer
          nullable: true
      type: object
    inviteHistory:
      properties:
        id:
          type: integer
          nullable: false
        invite_id:
          type: integer
          nullable: false
        log_message:
          type: string
          nullable: true
        invite_status:
          type: string
          nullable: true
        created_on:
          type: string
          format: date-time
          nullable: true
        created_by:
          type: integer
          nullable: true
      type: object
    Loan:
      properties:
        loan_id:
          type: integer
          nullable: false
        user_id:
          type: integer
          nullable: true
        property_id:
          type: integer
          nullable: true
        loan_description:
          type: string
          nullable: true
        loan_bank_name:
          type: string
          nullable: true
        loan_account_number:
          type: string
          nullable: true
        loan_amount:
          type: number
          nullable: true
        loan_type:
          type: string
          nullable: true
        interest_type:
          type: integer
          nullable: true
        interest_rate:
          type: number
          nullable: true
        interest_percentage:
          type: number
          nullable: true
        borrowing_expenses:
          type: number
          nullable: true
        commencement_date:
          type: string
          format: date-time
          nullable: true
        account_id:
          type: integer
          nullable: true
        is_paid_off:
          type: integer
          nullable: true
        paid_off_date:
          type: string
          format: date-time
          nullable: true
        term:
          type: integer
          nullable: true
        balance_amount:
          type: number
          nullable: true
        balance_date:
          type: string
          format: date-time
          nullable: true
        repayment_amount:
          type: number
          nullable: true
        repayment_frequency:
          type: string
          nullable: true
        created_on:
          type: string
          format: date-time
          nullable: true
        created_by:
          type: integer
          nullable: true
        updated_on:
          type: string
          format: date-time
          nullable: true
        updated_by:
          type: integer
          nullable: true
      type: object
    LoanForecastingDetails:
      properties:
        id:
          type: integer
          nullable: false
        loan_id:
          type: integer
          nullable: true
        financial_year:
          type: integer
          nullable: true
        date:
          type: string
          format: date-time
          nullable: true
        loan_balance:
          type: number
          nullable: true
        interest_rate:
          type: number
          nullable: true
        account_id:
          type: integer
          nullable: true
        interest_percentage:
          type: number
          nullable: true
        created_on:
          type: string
          format: date-time
          nullable: true
        created_by:
          type: integer
          nullable: true
        updated_on:
          type: string
          format: date-time
          nullable: true
        updated_by:
          type: integer
          nullable: true
      type: object
    LockOut:
      properties:
        id:
          type: integer
          nullable: false
        user_id:
          type: integer
          nullable: true
        year:
          type: integer
          nullable: true
        lock_out:
          type: integer
          nullable: true
        created_on:
          type: string
          format: date-time
          nullable: false
        updated_on:
          type: string
          format: date-time
          nullable: true
        created_by:
          type: integer
          nullable: true
        updated_by:
          type: integer
          nullable: true
      type: object
    Logbook:
      properties:
        id:
          type: integer
          nullable: false
        user_id:
          type: integer
          nullable: false
        date:
          type: string
          format: date-time
          nullable: false
        odo_start:
          type: number
          nullable: true
        odo_end:
          type: number
          nullable: true
        purpose:
          type: integer
          nullable: false
        kms:
          type: number
          nullable: true
        description:
          type: string
          nullable: true
        created_on:
          type: string
          format: date-time
          nullable: false
        created_by:
          type: integer
          nullable: true
        updated_on:
          type: string
          format: date-time
          nullable: true
        updated_by:
          type: integer
          nullable: true
      type: object
    MFAQuestionAnswers:
      properties:
        id:
          description: "use DatabaseTraits;\n/**"
          type: integer
          nullable: false
        question_id:
          type: integer
          nullable: false
        user_id:
          type: integer
          nullable: false
        answer:
          type: string
          nullable: true
      type: object
    MFAQuestions:
      properties:
        id:
          type: integer
          nullable: false
        question:
          type: string
          nullable: true
      type: object
    Property:
      properties:
        property_id:
          type: integer
          nullable: false
        user_id:
          type: integer
          nullable: false
        address:
          type: string
          nullable: false
        corelogic_ref_id:
          type: string
          nullable: true
        corelogic_loc_id:
          type: string
          nullable: true
        primary_photo:
          type: string
          nullable: true
        primary_photo_unique_name:
          type: string
          nullable: true
        purchase_price:
          type: number
          nullable: true
        purchase_date:
          type: string
          format: date-time
          nullable: true
        capital_cost:
          type: number
          nullable: true
        settlement_date:
          type: string
          format: date-time
          nullable: true
        status:
          type: integer
          nullable: false
        is_sold:
          type: integer
          nullable: true
        dep_type:
          type: integer
          nullable: true
        sold_date:
          type: string
          format: date-time
          nullable: true
        contract_sale_date:
          type: string
          format: date-time
          nullable: true
        sale_amount:
          type: number
          nullable: true
        sale_expenses:
          type: number
          nullable: true
        created_on:
          type: string
          format: date-time
          nullable: true
        created_by:
          type: integer
          nullable: true
        updated_by:
          type: integer
          nullable: true
        is_deleted:
          type: integer
          nullable: true
      type: object
    PropertyCategory:
      properties:
        prop_category_id:
          type: integer
          nullable: false
        user_id:
          type: integer
          nullable: true
        category_name:
          type: string
          nullable: false
        is_tax_inclusive:
          type: integer
          nullable: false
        is_property_share:
          type: integer
          nullable: false
        created_on:
          type: string
          format: date-time
          nullable: true
        created_by:
          type: integer
          nullable: true
        updated_on:
          type: string
          format: date-time
          nullable: true
        updated_by:
          type: integer
          nullable: true
      type: object
    PropertyCategoryTrans:
      properties:
        id:
          type: integer
          nullable: false
        property_id:
          type: integer
          nullable: false
        prop_category_id:
          type: integer
          nullable: false
        from_date:
          type: string
          format: date-time
          nullable: true
        to_date:
          type: string
          format: date-time
          nullable: true
        created_on:
          type: string
          format: date-time
          nullable: true
        created_by:
          type: integer
          nullable: true
        is_tax_inclusive:
          type: integer
          nullable: false
      type: object
    PropertyForecastingCurrentValue:
      properties:
        id:
          type: integer
          nullable: false
        property_id:
          type: integer
          nullable: true
        forecasting_date:
          type: string
          format: date-time
          nullable: true
        forecasting_year:
          type: integer
          nullable: true
        current_value:
          type: number
          nullable: true
        created_on:
          type: string
          format: date-time
          nullable: true
        created_by:
          type: integer
          nullable: true
        updated_on:
          type: string
          format: date-time
          nullable: true
        updated_by:
          type: integer
          nullable: true
      type: object
    PropertyForecastingDetails:
      properties:
        id:
          type: integer
          nullable: false
        property_id:
          type: integer
          nullable: true
        financial_year:
          type: integer
          nullable: true
        expense:
          type: number
          nullable: true
        income:
          type: number
          nullable: true
        depreciation:
          type: number
          nullable: true
        current_value:
          type: number
          nullable: true
        interest:
          type: number
          nullable: true
      type: object
    PropertyForecastingSplitup:
      properties:
        id:
          type: integer
          nullable: false
        property_forecasting_details_id:
          type: integer
          nullable: true
        chart_accounts_id:
          type: integer
          nullable: true
        exp_dep_mode:
          type: integer
          nullable: true
        amount:
          type: number
          nullable: true
        created_on:
          type: string
          format: date-time
          nullable: true
        created_by:
          type: integer
          nullable: true
        updated_on:
          type: string
          format: date-time
          nullable: true
        updated_by:
          type: integer
          nullable: true
      type: object
    PropertyShare:
      properties:
        id:
          type: integer
          nullable: false
        property_id:
          type: integer
          nullable: true
        user_id:
          type: integer
          nullable: true
        prop_category_id:
          type: integer
          nullable: false
        parent_id:
          type: integer
          nullable: true
        invite_id:
          type: integer
          nullable: true
        share_percentage:
          type: number
          nullable: true
        created_on:
          type: string
          format: date-time
          nullable: false
        updated_on:
          type: string
          format: date-time
          nullable: true
        created_by:
          type: integer
          nullable: true
        updated_by:
          type: integer
          nullable: true
      type: object
    PropertyShareRemove:
      properties:
        id:
          type: integer
          nullable: false
        property_id:
          type: integer
          nullable: true
        user_id:
          type: integer
          nullable: true
        status:
          type: integer
          nullable: true
        created_on:
          type: string
          format: date-time
          nullable: false
        updated_on:
          type: string
          format: date-time
          nullable: true
      type: object
    Revisions:
      properties:
        id:
          type: integer
          nullable: false
        timestamp:
          type: string
          format: date-time
          nullable: true
        username:
          type: string
          nullable: true
      type: object
    SpareCategories:
      properties:
        spare_category_id:
          type: integer
          nullable: false
        name:
          type: string
          nullable: false
        status:
          type: integer
          nullable: false
        created_on:
          type: string
          format: date-time
          nullable: true
        created_by:
          type: integer
          nullable: true
        updated_on:
          type: string
          format: date-time
          nullable: true
        updated_by:
          type: integer
          nullable: true
      type: object
    SpareDocuments:
      properties:
        id:
          type: integer
          nullable: false
        user_id:
          type: integer
          nullable: true
        spare_category_id:
          type: integer
          nullable: false
        document_name:
          type: string
          nullable: false
        spare_type:
          type: integer
          nullable: false
        document_path:
          type: string
          nullable: false
        original_name:
          type: string
          nullable: false
        unique_name:
          type: string
          nullable: false
        created_on:
          type: string
          format: date-time
          nullable: true
        created_by:
          type: integer
          nullable: true
      type: object
    Subscription:
      properties:
        id:
          type: integer
          nullable: false
        title:
          type: string
          nullable: false
        description:
          type: string
          nullable: true
        days:
          type: integer
          nullable: false
        price:
          type: number
          nullable: false
        status:
          type: integer
          nullable: false
        created_on:
          type: string
          format: date-time
          nullable: false
        access_worktank:
          type: integer
          nullable: true
        access_propertytank:
          type: integer
          nullable: true
      type: object
    SubscriptionPayment:
      properties:
        payment_id:
          type: integer
          nullable: false
        subscription_id:
          type: integer
          nullable: true
        client_id:
          type: integer
          nullable: true
        user_id:
          type: integer
          nullable: true
        payment_amount:
          type: number
          nullable: true
        payment_status:
          type: integer
          nullable: true
        response_message:
          type: string
          nullable: true
        transaction_id:
          type: string
          nullable: true
        transaction_date:
          type: string
          format: date-time
          nullable: true
        receipt_number:
          type: string
          nullable: true
        receipt_path:
          type: string
          nullable: true
        created_on:
          type: string
          format: date-time
          nullable: true
        created_by:
          type: integer
          nullable: true
        updated_on:
          type: string
          format: date-time
          nullable: true
        updated_by:
          type: integer
          nullable: true
        is_client_paid:
          type: integer
          nullable: false
      type: object
    SubscriptionPaymentHistory:
      properties:
        id:
          type: integer
          nullable: false
        payment_id:
          type: integer
          nullable: true
        user_id:
          type: integer
          nullable: true
        payment_status:
          type: integer
          nullable: true
        token:
          type: string
          nullable: true
        response_message:
          type: string
          nullable: true
        transaction_id:
          type: string
          nullable: true
        created_on:
          type: string
          format: date-time
          nullable: true
        created_by:
          type: integer
          nullable: true
      type: object
    SummaryHeader:
      properties:
        id:
          type: integer
          nullable: false
        title:
          type: string
          nullable: true
        sort_order:
          type: integer
          nullable: true
        parent_id:
          type: integer
          nullable: true
        is_header:
          type: integer
          nullable: true
        status:
          type: integer
          nullable: true
        created_on:
          type: string
          format: date-time
          nullable: true
        created_by:
          type: integer
          nullable: true
      type: object
    SummaryValues:
      properties:
        id:
          type: integer
          nullable: false
        financial_year:
          type: integer
          nullable: true
        amount:
          type: number
          nullable: true
        tax_amount:
          type: number
          nullable: true
        offset_amount:
          type: number
          nullable: true
        summary_header_id:
          type: integer
          nullable: true
        user_id:
          type: integer
          nullable: true
        is_forecast:
          type: integer
          nullable: true
        created_on:
          type: string
          format: date-time
          nullable: false
        updated_on:
          type: string
          format: date-time
          nullable: true
        property_id:
          type: integer
          nullable: true
        employer_id:
          type: integer
          nullable: true
      type: object
    TaxItem:
      properties:
        id:
          type: integer
          nullable: false
        financial_year:
          type: integer
          nullable: true
        section:
          type: integer
          nullable: true
        name:
          type: string
          nullable: true
        tax_item:
          type: string
          nullable: true
        seq:
          type: integer
          nullable: true
        created_on:
          type: string
          format: date-time
          nullable: true
      type: object
    TransReceipt:
      properties:
        trans_receipt_id:
          type: integer
          nullable: false
        trans_mode:
          type: integer
          nullable: true
        trans_id:
          type: integer
          nullable: true
        receipt_path:
          type: string
          nullable: true
        receipt_unique_name:
          type: string
          nullable: true
        original_name:
          type: string
          nullable: true
        file_ext:
          type: string
          nullable: true
        file_size:
          type: string
          nullable: true
        created_on:
          type: string
          format: date-time
          nullable: true
        created_by:
          type: integer
          nullable: true
      type: object
    Transactions:
      properties:
        trans_id:
          type: integer
          nullable: false
        user_id:
          type: integer
          nullable: true
        tank_type:
          type: integer
          nullable: true
        property_id:
          type: integer
          nullable: true
        bankfeed_id:
          type: integer
          nullable: true
        chart_accounts_id:
          type: integer
          nullable: true
        transaction_mode:
          type: integer
          nullable: true
        exp_trans_mode:
          type: integer
          nullable: true
        is_exp_trans_mode_reconciled:
          type: integer
          nullable: true
        trans_date:
          type: string
          format: date-time
          nullable: true
        date_paid:
          type: string
          format: date-time
          nullable: true
        trans_amount:
          type: number
          nullable: true
        description:
          type: string
          nullable: true
        expense_claim_percentage:
          type: number
          nullable: true
        income_fees_total:
          type: number
          nullable: true
        created_on:
          type: string
          format: date-time
          nullable: true
        created_by:
          type: integer
          nullable: true
        updated_on:
          type: string
          format: date-time
          nullable: true
        updated_by:
          type: integer
          nullable: true
        employer_id:
          type: integer
          nullable: true
        tax_amount:
          type: number
          nullable: true
        share_percent:
          type: number
          nullable: true
        is_non_taxable:
          type: integer
          nullable: true
        taxable_component:
          type: number
          nullable: true
        parent_trans_id:
          type: integer
          nullable: true
      type: object
    TransactionsAudit:
      properties:
        id:
          type: integer
          nullable: false
        trans_id:
          type: integer
          nullable: true
        user_id:
          type: integer
          nullable: true
        tank_type:
          type: integer
          nullable: true
        property_id:
          type: integer
          nullable: true
        bankfeed_id:
          type: integer
          nullable: true
        transaction_mode:
          type: integer
          nullable: true
        exp_trans_mode:
          type: integer
          nullable: true
        is_exp_trans_mode_reconciled:
          type: integer
          nullable: true
        trans_date:
          type: string
          format: date-time
          nullable: true
        date_paid:
          type: string
          format: date-time
          nullable: true
        trans_amount:
          type: number
          nullable: true
        description:
          type: string
          nullable: true
        chart_accounts_id:
          type: integer
          nullable: true
        expense_claim_percentage:
          type: number
          nullable: true
        income_fees_total:
          type: number
          nullable: true
        created_on:
          type: string
          format: date-time
          nullable: true
        created_by:
          type: integer
          nullable: true
        updated_on:
          type: string
          format: date-time
          nullable: true
        updated_by:
          type: integer
          nullable: true
        rev:
          type: string
          nullable: true
        revtype:
          type: string
          nullable: true
      type: object
    User:
      properties:
        id:
          type: integer
          nullable: false
        uuid:
          type: string
          nullable: false
        firstname:
          type: string
          nullable: false
        lastname:
          type: string
          nullable: true
        middlename:
          type: string
          nullable: true
        dob:
          type: string
          format: date-time
          nullable: true
        tfn:
          type: string
          nullable: true
        email:
          type: string
          nullable: false
        phone_number:
          type: integer
          nullable: true
        stripe_cust_id:
          type: string
          nullable: true
        token:
          type: string
          nullable: true
        gtf_token:
          type: string
          nullable: true
        profile_photo:
          type: string
          nullable: true
        address:
          type: string
          nullable: true
        suburb:
          type: string
          nullable: true
        state:
          type: string
          nullable: true
        pincode:
          type: integer
          nullable: true
        country:
          type: string
          nullable: true
        country_code:
          type: string
          nullable: true
        work_dep_type:
          type: integer
          nullable: true
        is_australian_resident:
          type: integer
          nullable: true
        password:
          type: string
          nullable: true
        user_type:
          type: integer
          nullable: false
        is_email_verified:
          type: integer
          nullable: true
        is_mobile_Verified:
          type: integer
          nullable: true
        is_basic_info_set:
          type: integer
          nullable: true
        is_deleted:
          type: integer
          nullable: false
        status:
          type: integer
          nullable: false
        created_on:
          type: string
          format: date-time
          nullable: false
        updated_on:
          type: string
          format: date-time
          nullable: true
        created_by:
          type: integer
          nullable: true
        updated_by:
          type: integer
          nullable: true
        is_payment_cancel:
          type: integer
          nullable: true
        subscription_expire:
          type: string
          format: date-time
          nullable: true
        contact_name:
          type: string
          nullable: true
      type: object
    UserAccountSetup:
      properties:
        id:
          type: integer
          nullable: false
        module_id:
          type: integer
          nullable: true
        user_id:
          type: integer
          nullable: true
        score:
          type: integer
          nullable: true
        created_on:
          type: string
          format: date-time
          nullable: false
        updated_on:
          type: string
          format: date-time
          nullable: true
        created_by:
          type: integer
          nullable: true
        updated_by:
          type: integer
          nullable: true
      type: object
    UserAccountantMapping:
      properties:
        user_accountant_map_id:
          type: integer
          nullable: false
        invite_id:
          type: integer
          nullable: true
        user_client_id:
          type: integer
          nullable: true
        user_accountant_id:
          type: integer
          nullable: true
        access_work_tank:
          type: integer
          nullable: false
        access_property_tank:
          type: integer
          nullable: false
        access_spare_tank:
          type: integer
          nullable: false
        payment_acceptance:
          type: integer
          nullable: false
        is_active:
          type: integer
          nullable: true
        firm_id:
          type: integer
          nullable: false
        created_on:
          type: string
          format: date-time
          nullable: true
        created_by:
          type: integer
          nullable: true
        updated_on:
          type: string
          format: date-time
          nullable: true
        updated_by:
          type: integer
          nullable: true
      type: object
    UserSession:
      properties:
        id:
          type: integer
          nullable: false
        user_id:
          type: integer
          nullable: true
        device_id:
          type: string
          nullable: false
        jwt_token:
          type: string
          nullable: true
        jwt_refresh_token:
          type: string
          nullable: true
        created_on:
          type: string
          format: date-time
          nullable: false
      type: object
    UserSubscription:
      properties:
        id:
          type: integer
          nullable: false
        user_id:
          type: integer
          nullable: false
        subscription_id:
          type: integer
          nullable: false
        start_date:
          type: string
          nullable: true
        end_date:
          type: string
          nullable: true
        subscription_details:
          type: string
          nullable: true
        subscription_amount:
          type: number
          nullable: false
        subscribed_days:
          type: integer
          nullable: false
        status:
          type: integer
          nullable: false
        created_on:
          type: string
          format: date-time
          nullable: false
        created_by:
          type: integer
          nullable: true
        is_deleted:
          type: integer
          nullable: true
        payment_status:
          type: integer
          nullable: true
        access_worktank:
          type: integer
          nullable: true
        access_propertytank:
          type: integer
          nullable: true
        property_quantity:
          type: integer
          nullable: true
      type: object
    WorkCalendar:
      properties:
        id:
          type: integer
          nullable: false
        user_id:
          type: integer
          nullable: true
        calendar_date:
          type: string
          format: date-time
          nullable: true
        worked_hours:
          type: number
          nullable: true
        calendar_notes:
          type: string
          nullable: true
        financial_month:
          type: integer
          nullable: true
        financial_year:
          type: integer
          nullable: true
        created_on:
          type: string
          format: date-time
          nullable: true
        created_by:
          type: integer
          nullable: true
        updated_on:
          type: string
          format: date-time
          nullable: true
        updated_by:
          type: integer
          nullable: true
      type: object
    Yodlee:
      properties:
        yodlee_id:
          type: integer
          nullable: false
        user_id:
          type: integer
          nullable: true
        yodlee_user_id:
          type: integer
          nullable: true
        login_name:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        additional_details:
          type: string
          nullable: true
      type: object
tags:
  -
    name: user
    description: 'Operations about user'
